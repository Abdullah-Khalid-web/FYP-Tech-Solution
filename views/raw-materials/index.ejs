<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Raw Product Management - <%= (shop && shop.name) || 'My Shop' %>
    </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        :root {
            --primary-color: <%=(shop && shop.primary_color) || '#007bff' %>;
            --secondary-color: <%=(shop && shop.secondary_color) || '#6c757d' %>;
        }

        body {
            background-color: #f8fafc;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .dashboard-header {
            background-color: white;
            border-bottom: 1px solid #e5e7eb;
            padding: 1.5rem 0;
            margin-bottom: 1.5rem;
        }

        .card {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            border: 1px solid #e5e7eb;
            margin-bottom: 1.5rem;
        }

        .card-header {
            background: #f8fafc;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            border-radius: 0.5rem 0.5rem 0 0;
        }

        .card-body {
            padding: 1.5rem;
        }

        .summary-card {
            text-align: center;
            padding: 1.5rem;
            border-left: 4px solid;
        }

        .summary-total {
            border-left-color: #0d6efd;
        }

        .summary-low {
            border-left-color: #fd7e14;
        }

        .summary-critical {
            border-left-color: #dc3545;
        }

        .summary-suppliers {
            border-left-color: #198754;
        }

        .summary-value {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .summary-label {
            color: #6b7280;
            font-size: 0.875rem;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border: none;
            border-radius: 0.375rem;
            padding: 0.5rem 1rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #1e429f;
            transform: translateY(-1px);
        }

        .table th {
            background: #f8fafc;
            color: #374151;
            font-weight: 600;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            border-bottom: 2px solid #e5e7eb;
            padding: 0.75rem 1rem;
        }

        .table td {
            padding: 1rem;
            border-color: #f3f4f6;
            vertical-align: middle;
        }

        .badge-pill {
            border-radius: 50px;
            padding: 0.375rem 0.75rem;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            color: #6b7280;
        }

        .empty-state-icon {
            font-size: 3rem;
            color: #d1d5db;
            margin-bottom: 1rem;
        }

        .nav-tabs .nav-link {
            color: #6b7280;
            font-weight: 500;
            border: none;
            padding: 0.75rem 1.5rem;
        }

        .nav-tabs .nav-link.active {
            color: var(--primary-color);
            border-bottom: 2px solid var(--primary-color);
            background: transparent;
        }

        .stock-low {
            background-color: #fff3cd;
        }

        .stock-critical {
            background-color: #f8d7da;
        }

        .stock-over {
            background-color: #d1ecf1;
        }

        .alert-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #dc3545;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 0.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .loading-spinner {
            display: inline-block;
            width: 1rem;
            height: 1rem;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        @media (max-width: 768px) {
            .dashboard-header {
                padding: 1rem 0;
                margin-bottom: 1rem;
            }

            .card-body {
                padding: 1rem;
            }
        }
    </style>
</head>

<body>
    <!-- Header -->
    <div class="dashboard-header">
        <div class="container-fluid">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="h3 mb-2"><i class="fas fa-boxes me-2"></i>Raw Product Management</h1>
                    <p class="mb-0 text-muted">Track, manage and analyze raw materials</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <a href="/" class="btn btn-outline-secondary btn-sm me-2">
                        <i class="fas fa-arrow-left me-1"></i>Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <!-- Navigation Tabs -->
        <div class="card">
            <div class="card-body p-0">
                <ul class="nav nav-tabs" id="rawMaterialTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="dashboard-tab" data-bs-toggle="tab"
                            data-bs-target="#dashboard" type="button" role="tab">
                            <i class="fas fa-tachometer-alt me-2"></i>Dashboard
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="materials-tab" data-bs-toggle="tab" data-bs-target="#materials"
                            type="button" role="tab">
                            <i class="fas fa-box me-2"></i>Raw Materials
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="suppliers-tab" data-bs-toggle="tab" data-bs-target="#suppliers"
                            type="button" role="tab">
                            <i class="fas fa-truck me-2"></i>Suppliers
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link position-relative" id="alerts-tab" data-bs-toggle="tab"
                            data-bs-target="#alerts" type="button" role="tab">
                            <i class="fas fa-bell me-2"></i>Stock Alerts
                            <span class="alert-badge" id="alertCount">0</span>
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="batch-tab" data-bs-toggle="tab" data-bs-target="#batch"
                            type="button" role="tab">
                            <i class="fas fa-layer-group me-2"></i>Batch Tracking
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="analysis-tab" data-bs-toggle="tab" data-bs-target="#analysis"
                            type="button" role="tab">
                            <i class="fas fa-chart-line me-2"></i>Cost Analysis
                        </button>
                    </li>
                </ul>
            </div>
        </div>

        <!-- Tab Content -->
        <div class="tab-content" id="rawMaterialContent">
            <!-- Dashboard Section -->
            <div class="tab-pane fade show active" id="dashboard" role="tabpanel">
                <!-- Summary Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card summary-card summary-total">
                            <div class="summary-value" id="totalMaterials">0</div>
                            <div class="summary-label">Total Raw Materials</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card summary-card summary-low">
                            <div class="summary-value" id="lowStockCount">0</div>
                            <div class="summary-label">Low Stock Items</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card summary-card summary-critical">
                            <div class="summary-value" id="criticalStockCount">0</div>
                            <div class="summary-label">Critical Stock Items</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card summary-card summary-suppliers">
                            <div class="summary-value" id="supplierCount">0</div>
                            <div class="summary-label">Active Suppliers</div>
                        </div>
                    </div>
                </div>

                <!-- Recent Stock Movements -->
                <div class="row">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="fas fa-exchange-alt me-2"></i>Recent Stock Movements</h5>
                                <button class="btn btn-sm btn-outline-primary" onclick="loadBatches()">
                                    <i class="fas fa-refresh me-1"></i>Refresh
                                </button>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-hover mb-0">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Date</th>
                                                <th>Material</th>
                                                <th>Type</th>
                                                <th>Quantity</th>
                                                <th>Reference</th>
                                                <th>Batch</th>
                                            </tr>
                                        </thead>
                                        <tbody id="recentMovements">
                                            <tr>
                                                <td colspan="6" class="text-center py-4">
                                                    <div class="loading-spinner me-2"></div>
                                                    Loading...
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i>Critical Stock Alerts
                                </h5>
                            </div>
                            <div class="card-body" id="criticalAlerts">
                                <div class="text-center py-3">
                                    <div class="loading-spinner me-2"></div>
                                    Loading alerts...
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Raw Materials Section -->
            <div class="tab-pane fade" id="materials" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-box me-2"></i>Raw Materials</h5>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMaterialModal">
                            <i class="fas fa-plus me-2"></i>Add Material
                        </button>
                    </div>
                    <div class="card-body">
                        <!-- Filters -->
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <input type="text" class="form-control" id="materialSearch"
                                    placeholder="Search materials...">
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" id="materialCategory">
                                    <option value="">All Categories</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" id="materialSupplier">
                                    <option value="">All Suppliers</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" id="materialStatus">
                                    <option value="">All Status</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" id="stockStatus">
                                    <option value="">All Stock Levels</option>
                                    <option value="low">Low Stock</option>
                                    <option value="critical">Critical</option>
                                    <option value="over">Over Stock</option>
                                </select>
                            </div>
                            <div class="col-md-1">
                                <button class="btn btn-outline-secondary w-100" id="resetFilters">
                                    <i class="fas fa-refresh"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Materials Table -->
                        <div class="table-responsive">
                            <table class="table table-hover" id="materialsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Name</th>
                                        <th>SKU</th>
                                        <th>Category</th>
                                        <th>Current Stock</th>
                                        <th>Min Level</th>
                                        <th>Cost Price</th>
                                        <th>Supplier</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td colspan="9" class="text-center py-4">
                                            <div class="loading-spinner me-2"></div>
                                            Loading materials...
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <div class="text-muted" id="materialCount">Loading...</div>
                            <nav>
                                <ul class="pagination mb-0" id="materialPagination">
                                    <!-- Pagination will be populated by JavaScript -->
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Suppliers Section -->
            <div class="tab-pane fade" id="suppliers" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-truck me-2"></i>Suppliers</h5>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addSupplierModal">
                            <i class="fas fa-plus me-2"></i>Add Supplier
                        </button>
                    </div>
                    <div class="card-body">
                        <!-- Filters -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <input type="text" class="form-control" id="supplierSearch"
                                    placeholder="Search suppliers...">
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="supplierStatus">
                                    <option value="">All Status</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="supplierRating">
                                    <option value="">All Ratings</option>
                                    <option value="5">5 Stars</option>
                                    <option value="4">4 Stars</option>
                                    <option value="3">3 Stars</option>
                                    <option value="2">2 Stars</option>
                                    <option value="1">1 Star</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-secondary w-100" id="resetSupplierFilters">
                                    <i class="fas fa-refresh"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Suppliers Table -->
                        <div class="table-responsive">
                            <table class="table table-hover" id="suppliersTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Name</th>
                                        <th>Contact Person</th>
                                        <th>Email</th>
                                        <th>Phone</th>
                                        <th>Rating</th>
                                        <th>Materials Supplied</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td colspan="8" class="text-center py-4">
                                            <div class="loading-spinner me-2"></div>
                                            Loading suppliers...
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <div class="text-muted" id="supplierCountText">Loading...</div>
                            <nav>
                                <ul class="pagination mb-0" id="supplierPagination">
                                    <!-- Pagination will be populated by JavaScript -->
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Stock Alerts Section -->
            <div class="tab-pane fade" id="alerts" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-bell me-2"></i>Stock Alerts</h5>
                        <div>
                            <button class="btn btn-outline-primary btn-sm me-2" id="markAllResolved">
                                <i class="fas fa-check-double me-1"></i>Mark All Resolved
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" id="exportAlerts">
                                <i class="fas fa-download me-1"></i>Export
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Alert Filters -->
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <select class="form-select" id="alertTypeFilter">
                                    <option value="">All Alert Types</option>
                                    <option value="low_stock">Low Stock</option>
                                    <option value="expiry">Expiry</option>
                                    <option value="over_stock">Over Stock</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="alertStatusFilter">
                                    <option value="">All Status</option>
                                    <option value="unresolved">Unresolved</option>
                                    <option value="resolved">Resolved</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <input type="text" class="form-control" id="alertDateRange"
                                    placeholder="Select date range">
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-secondary w-100" id="resetAlertFilters">
                                    <i class="fas fa-refresh"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Alerts Table -->
                        <div class="table-responsive">
                            <table class="table table-hover" id="alertsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Alert Type</th>
                                        <th>Material</th>
                                        <th>Message</th>
                                        <th>Current Value</th>
                                        <th>Threshold</th>
                                        <th>Date</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td colspan="8" class="text-center py-4">
                                            <div class="loading-spinner me-2"></div>
                                            Loading alerts...
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <div class="text-muted" id="alertCountText">Loading...</div>
                            <nav>
                                <ul class="pagination mb-0" id="alertPagination">
                                    <!-- Pagination will be populated by JavaScript -->
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Batch Tracking Section -->
            <div class="tab-pane fade" id="batch" role="tabpanel">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-layer-group me-2"></i>Batch Tracking</h5>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBatchModal">
                            <i class="fas fa-plus me-2"></i>Add Batch
                        </button>
                    </div>
                    <div class="card-body">
                        <!-- Batch Filters -->
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <input type="text" class="form-control" id="batchSearch"
                                    placeholder="Search batches...">
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" id="batchMaterial">
                                    <option value="">All Materials</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" id="batchType">
                                    <option value="">All Types</option>
                                    <option value="purchase">Purchase</option>
                                    <option value="production">Production</option>
                                    <option value="waste">Waste</option>
                                    <option value="adjustment">Adjustment</option>
                                    <option value="transfer">Transfer</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="text" class="form-control" id="batchDateRange"
                                    placeholder="Select date range">
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-secondary w-100" id="resetBatchFilters">
                                    <i class="fas fa-refresh"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Batch Table -->
                        <div class="table-responsive">
                            <table class="table table-hover" id="batchTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Batch Number</th>
                                        <th>Material</th>
                                        <th>Movement Type</th>
                                        <th>Quantity</th>
                                        <th>Unit Cost</th>
                                        <th>Total Cost</th>
                                        <th>Reference</th>
                                        <th>Expiry Date</th>
                                        <th>Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td colspan="10" class="text-center py-4">
                                            <div class="loading-spinner me-2"></div>
                                            Loading batches...
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <div class="text-muted" id="batchCountText">Loading...</div>
                            <nav>
                                <ul class="pagination mb-0" id="batchPagination">
                                    <!-- Pagination will be populated by JavaScript -->
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Cost Analysis Section -->
            <div class="tab-pane fade" id="analysis" role="tabpanel">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-chart-line me-2"></i>Cost Analysis</h5>
                    </div>
                    <div class="card-body">
                        <!-- Analysis Controls -->
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <select class="form-select" id="analysisPeriod">
                                    <option value="monthly">Monthly</option>
                                    <option value="quarterly">Quarterly</option>
                                    <option value="yearly">Yearly</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="analysisMaterial">
                                    <option value="">All Materials</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="analysisSupplier">
                                    <option value="">All Suppliers</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="text" class="form-control" id="analysisDateRange"
                                    placeholder="Select date range">
                            </div>
                        </div>

                        <!-- Charts -->
                        <div class="row">
                            <div class="col-md-8">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">Cost Trends</h6>
                                    </div>
                                    <div class="card-body">
                                        <canvas id="costTrendChart" height="300"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">Cost by Category</h6>
                                    </div>
                                    <div class="card-body">
                                        <canvas id="costCategoryChart" height="300"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Cost Summary -->
                        <div class="row mt-4">
                            <div class="col-md-4">
                                <div class="card text-center">
                                    <div class="card-body">
                                        <h3 class="text-primary" id="totalInventoryValue">0</h3>
                                        <p class="text-muted mb-0">Total Inventory Value</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card text-center">
                                    <div class="card-body">
                                        <h3 class="text-success" id="monthlyCost">0</h3>
                                        <p class="text-muted mb-0">Monthly Material Cost</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card text-center">
                                    <div class="card-body">
                                        <h3 class="text-info" id="avgCostPerUnit">0</h3>
                                        <p class="text-muted mb-0">Avg Cost Per Unit</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Material Modal -->
    <div class="modal fade" id="addMaterialModal" tabindex="-1" aria-labelledby="addMaterialModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addMaterialModalLabel">Add Raw Material</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addMaterialForm">
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="materialName" class="form-label">Material Name *</label>
                                    <input type="text" class="form-control" id="materialName" name="name" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="materialSku" class="form-label">SKU</label>
                                    <input type="text" class="form-control" id="materialSku" name="sku">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="materialCategory" class="form-label">Category</label>
                                    <input type="text" class="form-control" id="materialCategory" name="category">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="materialUnit" class="form-label">Unit of Measure</label>
                                    <select class="form-select" id="materialUnit" name="unit_of_measure">
                                        <option value="pcs">Pieces</option>
                                        <option value="kg">Kilograms</option>
                                        <option value="g">Grams</option>
                                        <option value="l">Liters</option>
                                        <option value="ml">Milliliters</option>
                                        <option value="m">Meters</option>
                                        <option value="cm">Centimeters</option>
                                        <option value="box">Box</option>
                                        <option value="pack">Pack</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="materialDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="materialDescription" name="description"
                                rows="3"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="materialCost" class="form-label">Cost Price *</label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <%= (shop && shop.currency) || 'PKR' %>
                                        </span>
                                        <input type="number" step="0.01" class="form-control" id="materialCost"
                                            name="cost_price" required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="materialMinStock" class="form-label">Min Stock Level</label>
                                    <input type="number" step="0.001" class="form-control" id="materialMinStock"
                                        name="min_stock_level">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="materialMaxStock" class="form-label">Max Stock Level</label>
                                    <input type="number" step="0.001" class="form-control" id="materialMaxStock"
                                        name="max_stock_level">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="materialSupplier" class="form-label">Supplier</label>
                                    <select class="form-select" id="materialSupplierSelect" name="supplier_id">
                                        <option value="">Select Supplier</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="materialBarcode" class="form-label">Barcode</label>
                                    <input type="text" class="form-control" id="materialBarcode" name="barcode">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="materialBatchTracking"
                                        name="batch_tracking">
                                    <label class="form-check-label" for="materialBatchTracking">
                                        Enable Batch Tracking
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="materialExpiryTracking"
                                        name="expiry_tracking">
                                    <label class="form-check-label" for="materialExpiryTracking">
                                        Enable Expiry Tracking
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <span class="loading-spinner me-2 d-none"></span>
                            Save Material
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Add Supplier Modal -->
    <div class="modal fade" id="addSupplierModal" tabindex="-1" aria-labelledby="addSupplierModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addSupplierModalLabel">Add Supplier</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addSupplierForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="supplierName" class="form-label">Supplier Name *</label>
                            <input type="text" class="form-control" id="supplierName" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="supplierContact" class="form-label">Contact Person</label>
                            <input type="text" class="form-control" id="supplierContact" name="contact_person">
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="supplierEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="supplierEmail" name="email">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="supplierPhone" class="form-label">Phone</label>
                                    <input type="text" class="form-control" id="supplierPhone" name="phone">
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="supplierAddress" class="form-label">Address</label>
                            <textarea class="form-control" id="supplierAddress" name="address" rows="3"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="supplierTax" class="form-label">Tax Number</label>
                                    <input type="text" class="form-control" id="supplierTax" name="tax_number">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="supplierRating" class="form-label">Rating</label>
                                    <select class="form-select" id="supplierRatingSelect" name="rating">
                                        <option value="5">5 Stars</option>
                                        <option value="4">4 Stars</option>
                                        <option value="3">3 Stars</option>
                                        <option value="2">2 Stars</option>
                                        <option value="1">1 Star</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="supplierPaymentTerms" class="form-label">Payment Terms</label>
                            <input type="text" class="form-control" id="supplierPaymentTerms" name="payment_terms"
                                placeholder="e.g., Net 30">
                        </div>
                        <div class="mb-3">
                            <label for="supplierNotes" class="form-label">Notes</label>
                            <textarea class="form-control" id="supplierNotes" name="notes" rows="3"></textarea>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="supplierActive" name="is_active"
                                checked>
                            <label class="form-check-label" for="supplierActive">
                                Active Supplier
                            </label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <span class="loading-spinner me-2 d-none"></span>
                            Save Supplier
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Add Batch Modal -->
    <div class="modal fade" id="addBatchModal" tabindex="-1" aria-labelledby="addBatchModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addBatchModalLabel">Add Stock Movement</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addBatchForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="batchMaterialSelect" class="form-label">Material *</label>
                            <select class="form-select" id="batchMaterialSelect" name="raw_material_id" required>
                                <option value="">Select Material</option>
                            </select>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="batchNumber" class="form-label">Batch Number</label>
                                    <input type="text" class="form-control" id="batchNumber" name="batch_number">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="movementType" class="form-label">Movement Type *</label>
                                    <select class="form-select" id="movementType" name="movement_type" required>
                                        <option value="in">Stock In</option>
                                        <option value="out">Stock Out</option>
                                        <option value="adjustment">Adjustment</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="batchQuantity" class="form-label">Quantity *</label>
                                    <input type="number" step="0.001" class="form-control" id="batchQuantity"
                                        name="quantity" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="batchUnitCost" class="form-label">Unit Cost</label>
                                    <div class="input-group">
                                        <span class="input-group-text">
                                            <%= (shop && shop.currency) || 'PKR' %>
                                        </span>
                                        <input type="number" step="0.01" class="form-control" id="batchUnitCost"
                                            name="unit_cost">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="referenceType" class="form-label">Reference Type</label>
                                    <select class="form-select" id="referenceType" name="reference_type">
                                        <option value="purchase">Purchase</option>
                                        <option value="production">Production</option>
                                        <option value="waste">Waste</option>
                                        <option value="adjustment">Adjustment</option>
                                        <option value="transfer">Transfer</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="referenceId" class="form-label">Reference ID</label>
                                    <input type="text" class="form-control" id="referenceId" name="reference_id">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="movementDate" class="form-label">Movement Date *</label>
                                    <input type="date" class="form-control" id="movementDate" name="movement_date"
                                        required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="expiryDate" class="form-label">Expiry Date</label>
                                    <input type="date" class="form-control" id="expiryDate" name="expiry_date">
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="batchNotes" class="form-label">Notes</label>
                            <textarea class="form-control" id="batchNotes" name="notes" rows="3"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <span class="loading-spinner me-2 d-none"></span>
                            Save Movement
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        // Global variables
        let currentPage = {
            materials: 1,
            suppliers: 1,
            alerts: 1,
            batches: 1
        };
        const itemsPerPage = 10;
        let costTrendChart = null;
        let costCategoryChart = null;

        // API Base URL
        const API_BASE = '/raw';

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function () {
            initializeDatePickers();
            loadDashboardData();
            loadMaterials();
            loadSuppliers();
            loadAlerts();
            loadBatches();
            setupEventListeners();

            // Set current date for movement date
            document.getElementById('movementDate').valueAsDate = new Date();
        });

        // Update currency symbols in modals when page loads
document.addEventListener('DOMContentLoaded', function() {
    const currencySymbol = getCurrencySymbol();
    
    // Update modal currency symbols
    const currencyElements = document.querySelectorAll('.input-group-text');
    currencyElements.forEach(el => {
        if (el.id === 'currencySymbol' || el.id === 'batchCurrencySymbol') {
            el.textContent = currencySymbol;
        }
    });
});

        // Initialize date pickers
        function initializeDatePickers() {
            flatpickr("#alertDateRange", {
                mode: "range",
                dateFormat: "Y-m-d",
            });

            flatpickr("#batchDateRange", {
                mode: "range",
                dateFormat: "Y-m-d",
            });

            flatpickr("#analysisDateRange", {
                mode: "range",
                dateFormat: "Y-m-d",
            });
        }

        // Setup event listeners
        function setupEventListeners() {
            // Material form submission
            document.getElementById('addMaterialForm').addEventListener('submit', function (e) {
                e.preventDefault();
                saveMaterial();
            });

            // Supplier form submission
            document.getElementById('addSupplierForm').addEventListener('submit', function (e) {
                e.preventDefault();
                saveSupplier();
            });

            // Batch form submission
            document.getElementById('addBatchForm').addEventListener('submit', function (e) {
                e.preventDefault();
                saveBatch();
            });

            // Material filters
            document.getElementById('materialSearch').addEventListener('input', function () {
                filterMaterials();
            });

            document.getElementById('materialCategory').addEventListener('change', function () {
                filterMaterials();
            });

            document.getElementById('materialSupplier').addEventListener('change', function () {
                filterMaterials();
            });

            document.getElementById('materialStatus').addEventListener('change', function () {
                filterMaterials();
            });

            document.getElementById('stockStatus').addEventListener('change', function () {
                filterMaterials();
            });

            document.getElementById('resetFilters').addEventListener('click', function () {
                resetMaterialFilters();
            });

            // Supplier filters
            document.getElementById('supplierSearch').addEventListener('input', function () {
                filterSuppliers();
            });

            document.getElementById('supplierStatus').addEventListener('change', function () {
                filterSuppliers();
            });

            document.getElementById('supplierRating').addEventListener('change', function () {
                filterSuppliers();
            });

            document.getElementById('resetSupplierFilters').addEventListener('click', function () {
                resetSupplierFilters();
            });

            // Alert filters
            document.getElementById('alertTypeFilter').addEventListener('change', function () {
                filterAlerts();
            });

            document.getElementById('alertStatusFilter').addEventListener('change', function () {
                filterAlerts();
            });

            document.getElementById('resetAlertFilters').addEventListener('click', function () {
                resetAlertFilters();
            });

            // Batch filters
            document.getElementById('batchSearch').addEventListener('input', function () {
                filterBatches();
            });

            document.getElementById('batchMaterial').addEventListener('change', function () {
                filterBatches();
            });

            document.getElementById('batchType').addEventListener('change', function () {
                filterBatches();
            });

            document.getElementById('resetBatchFilters').addEventListener('click', function () {
                resetBatchFilters();
            });

            // Analysis controls
            document.getElementById('analysisPeriod').addEventListener('change', function () {
                updateCostAnalysis();
            });

            document.getElementById('analysisMaterial').addEventListener('change', function () {
                updateCostAnalysis();
            });

            document.getElementById('analysisSupplier').addEventListener('change', function () {
                updateCostAnalysis();
            });

            // Mark all alerts as resolved
            document.getElementById('markAllResolved').addEventListener('click', function () {
                markAllAlertsResolved();
            });

            // Export alerts
            document.getElementById('exportAlerts').addEventListener('click', function () {
                exportAlerts();
            });

            // Modal hidden events to reset forms
            document.getElementById('addMaterialModal').addEventListener('hidden.bs.modal', function () {
                document.getElementById('addMaterialForm').reset();
            });

            document.getElementById('addSupplierModal').addEventListener('hidden.bs.modal', function () {
                document.getElementById('addSupplierForm').reset();
                document.getElementById('supplierActive').checked = true;
            });

            document.getElementById('addBatchModal').addEventListener('hidden.bs.modal', function () {
                document.getElementById('addBatchForm').reset();
                document.getElementById('movementDate').valueAsDate = new Date();
            });
        }

        // API Helper Functions
        // API Helper Functions - FIXED VERSION
async function apiCall(endpoint, options = {}) {
    const url = `${API_BASE}${endpoint}`;
    
    try {
        const config = {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json', // IMPORTANT: Tell server we want JSON
                ...options.headers
            },
            ...options
        };

        const response = await fetch(url, config);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        return data;
    } catch (error) {
        console.error('API Call Failed:', error);
        throw error;
    }
}
        function showAlert(message, type = 'info') {
            // Remove any existing alerts first
            const existingAlerts = document.querySelectorAll('.alert');
            existingAlerts.forEach(alert => alert.remove());

            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
        <strong>${type === 'danger' ? 'Error!' : type === 'success' ? 'Success!' : 'Info!'}</strong> ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;

            document.body.appendChild(alertDiv);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentElement) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        function setLoading(button, isLoading) {
            if (!button) return;

            const spinner = button.querySelector('.loading-spinner');
            if (spinner) {
                if (isLoading) {
                    spinner.classList.remove('d-none');
                    button.disabled = true;
                } else {
                    spinner.classList.add('d-none');
                    button.disabled = false;
                }
            }
        }

        // Debugging function to test API connectivity
        async function testAPIEndpoints() {
            console.group('🔧 Testing API Endpoints');

            const endpoints = [
                '/',
                '/materials',
                '/suppliers',
                '/alerts',
                '/batches',
                '/cost-analysis'
            ];

            for (const endpoint of endpoints) {
                try {
                    console.log(`Testing: ${API_BASE}${endpoint}`);
                    const response = await fetch(`${API_BASE}${endpoint}`);
                    console.log(`✅ ${endpoint}: ${response.status} ${response.statusText}`);
                } catch (error) {
                    console.error(`❌ ${endpoint}: ${error.message}`);
                }
            }

            console.groupEnd();
        }

        // Call this function to test all endpoints
        // testAPIEndpoints();

        // Load dashboard data
        async function loadDashboardData() {
            try {
                const data = await apiCall('/');

                // Update summary cards
                document.getElementById('totalMaterials').textContent = data.dashboardStats.totalMaterials;
                document.getElementById('lowStockCount').textContent = data.dashboardStats.lowStockCount;
                document.getElementById('criticalStockCount').textContent = data.dashboardStats.criticalStockCount;
                document.getElementById('supplierCount').textContent = data.dashboardStats.supplierCount;

                // Update recent movements
                const recentMovementsContainer = document.getElementById('recentMovements');
                recentMovementsContainer.innerHTML = '';

                if (data.recentMovements && data.recentMovements.length > 0) {
                    data.recentMovements.forEach(movement => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${new Date(movement.movement_date).toLocaleDateString()}</td>
                            <td>${movement.material_name}</td>
                            <td><span class="badge ${movement.movement_type === 'in' ? 'bg-success' : movement.movement_type === 'out' ? 'bg-danger' : 'bg-warning'}">${movement.movement_type}</span></td>
                            <td>${movement.quantity}</td>
                            <td>${movement.reference_type} ${movement.reference_id || ''}</td>
                            <td>${movement.batch_number || 'N/A'}</td>
                        `;
                        recentMovementsContainer.appendChild(row);
                    });
                } else {
                    recentMovementsContainer.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center py-4 text-muted">
                                <i class="fas fa-exchange-alt fa-2x mb-2"></i>
                                <p>No recent movements</p>
                            </td>
                        </tr>
                    `;
                }

                // Update critical alerts
                const criticalAlertsContainer = document.getElementById('criticalAlerts');
                criticalAlertsContainer.innerHTML = '';

                if (data.criticalAlerts && data.criticalAlerts.length > 0) {
                    data.criticalAlerts.forEach(alert => {
                        const alertDiv = document.createElement('div');
                        alertDiv.className = `alert ${alert.alert_type === 'low_stock' ? 'alert-warning' : 'alert-danger'} mb-2`;
                        alertDiv.innerHTML = `
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <strong>${alert.material_name}</strong>
                                    <small class="d-block">${new Date(alert.created_at).toLocaleDateString()}</small>
                                </div>
                                <button class="btn btn-sm ${alert.alert_type === 'low_stock' ? 'btn-outline-warning' : 'btn-outline-danger'}" onclick="resolveAlert(${alert.id})">
                                    Resolve
                                </button>
                            </div>
                            <p class="mb-0 mt-2">${alert.alert_message}</p>
                        `;
                        criticalAlertsContainer.appendChild(alertDiv);
                    });
                } else {
                    criticalAlertsContainer.innerHTML = `
                        <div class="text-center text-muted">
                            <i class="fas fa-check-circle fa-2x mb-2"></i>
                            <p>No critical alerts</p>
                        </div>
                    `;
                }

            } catch (error) {
                console.error('Error loading dashboard:', error);
            }
        }

        // Load materials
        async function loadMaterials(page = 1) {
            try {
                const search = document.getElementById('materialSearch').value;
                const category = document.getElementById('materialCategory').value;
                const supplier = document.getElementById('materialSupplier').value;
                const status = document.getElementById('materialStatus').value;
                const stockStatus = document.getElementById('stockStatus').value;

                const params = new URLSearchParams({
                    page: page,
                    limit: itemsPerPage,
                    ...(search && { search }),
                    ...(category && { category }),
                    ...(supplier && { supplier }),
                    ...(status && { status }),
                    ...(stockStatus && { stock_status: stockStatus })
                });

                const data = await apiCall(`/materials?${params}`);

                renderMaterialsTable(data.data, data.pagination);

                // Populate filters if not already done
                if (data.filters) {
                    populateMaterialFilters(data.filters.categories, data.filters.suppliers);
                }

            } catch (error) {
                console.error('Error loading materials:', error);
            }
        }

        // Render materials table
// Render materials table - FIXED VERSION
function renderMaterialsTable(materials, pagination) {
    const tableBody = document.querySelector('#materialsTable tbody');
    tableBody.innerHTML = '';

    if (materials && materials.length > 0) {
        materials.forEach(material => {
            const row = document.createElement('tr');
            let stockClass = '';
            
            if (material.stock_status === 'critical') {
                stockClass = 'stock-critical';
            } else if (material.stock_status === 'low') {
                stockClass = 'stock-low';
            } else if (material.stock_status === 'over') {
                stockClass = 'stock-over';
            }

            row.className = stockClass;
            row.innerHTML = `
                <td>${material.name}</td>
                <td>${material.sku || 'N/A'}</td>
                <td>${material.category || 'N/A'}</td>
                <td>${material.current_stock} ${material.unit_of_measure}</td>
                <td>${material.min_stock_level}</td>
                <td>${getCurrencySymbol()} ${material.cost_price.toFixed(2)}</td>
                <td>${material.supplier_name || 'N/A'}</td>
                <td><span class="badge ${material.is_active ? 'bg-success' : 'bg-secondary'}">${material.is_active ? 'Active' : 'Inactive'}</span></td>
                <td>
                    <button class="btn btn-sm btn-outline-primary me-1" onclick="editMaterial(${material.id})">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteMaterial(${material.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    } else {
        tableBody.innerHTML = `
            <tr>
                <td colspan="9" class="text-center py-4">
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="fas fa-box"></i>
                        </div>
                        <h5>No materials found</h5>
                        <p class="text-muted mb-3">Add your first raw material to get started</p>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMaterialModal">
                            <i class="fas fa-plus me-2"></i>Add Material
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }

    updateMaterialPagination(pagination);
    document.getElementById('materialCount').textContent = `Showing ${materials.length} of ${pagination.total} materials`;
}

// Helper function to get currency symbol
function getCurrencySymbol() {
    // Get currency from shop object or use default
    const shopCurrency = window.shopCurrency || 'PKR';
    const currencySymbols = {
        'PKR': 'Rs',
        'USD': '$',
        'EUR': '€',
        'GBP': '£'
    };
    return currencySymbols[shopCurrency] || shopCurrency;
}

        // Update material pagination
        function updateMaterialPagination(pagination) {
            const paginationContainer = document.getElementById('materialPagination');
            paginationContainer.innerHTML = '';

            if (pagination.totalPages <= 1) return;

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${pagination.page === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="changeMaterialPage(${pagination.page - 1})">Previous</a>`;
            paginationContainer.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= pagination.totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${pagination.page === i ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" onclick="changeMaterialPage(${i})">${i}</a>`;
                paginationContainer.appendChild(pageLi);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${pagination.page === pagination.totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="changeMaterialPage(${pagination.page + 1})">Next</a>`;
            paginationContainer.appendChild(nextLi);
        }

        // Change material page
        function changeMaterialPage(page) {
            currentPage.materials = page;
            loadMaterials(page);
        }

        // Populate material filters
        function populateMaterialFilters(categories = [], suppliers = []) {
            const categorySelect = document.getElementById('materialCategory');
            const supplierSelect = document.getElementById('materialSupplier');
            const materialSupplierSelect = document.getElementById('materialSupplierSelect');
            const batchMaterialSelect = document.getElementById('batchMaterialSelect');
            const analysisMaterialSelect = document.getElementById('analysisMaterial');
            const batchMaterialFilter = document.getElementById('batchMaterial');

            // Clear existing options except the first one
            [categorySelect, supplierSelect, materialSupplierSelect, batchMaterialSelect, analysisMaterialSelect, batchMaterialFilter].forEach(select => {
                while (select.options.length > 1) {
                    select.remove(1);
                }
            });

            // Populate category filter
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            // Populate supplier filters
            suppliers.forEach(supplier => {
                const option = document.createElement('option');
                option.value = supplier;
                option.textContent = supplier;
                supplierSelect.appendChild(option);

                const option2 = document.createElement('option');
                option2.value = supplier;
                option2.textContent = supplier;
                materialSupplierSelect.appendChild(option2);
            });

            // For material selects, we need to load materials first
            loadMaterialsForSelects();
        }

        async function loadMaterialsForSelects() {
            try {
                const data = await apiCall('/materials?limit=1000'); // Get all materials for selects

                const batchMaterialSelect = document.getElementById('batchMaterialSelect');
                const analysisMaterialSelect = document.getElementById('analysisMaterial');
                const batchMaterialFilter = document.getElementById('batchMaterial');

                data.data.forEach(material => {
                    [batchMaterialSelect, analysisMaterialSelect, batchMaterialFilter].forEach(select => {
                        const option = document.createElement('option');
                        option.value = material.id;
                        option.textContent = material.name;
                        select.appendChild(option);
                    });
                });
            } catch (error) {
                console.error('Error loading materials for selects:', error);
            }
        }

        // Filter materials
        function filterMaterials() {
            loadMaterials(1);
        }

        // Reset material filters
        function resetMaterialFilters() {
            document.getElementById('materialSearch').value = '';
            document.getElementById('materialCategory').value = '';
            document.getElementById('materialSupplier').value = '';
            document.getElementById('materialStatus').value = '';
            document.getElementById('stockStatus').value = '';
            loadMaterials(1);
        }

        // Save material
        async function saveMaterial() {
            const form = document.getElementById('addMaterialForm');
            const submitButton = form.querySelector('button[type="submit"]');

            try {
                setLoading(submitButton, true);

                const formData = new FormData(form);
                const data = Object.fromEntries(formData);

                // Convert checkbox values to boolean
                data.batch_tracking = data.batch_tracking === 'on';
                data.expiry_tracking = data.expiry_tracking === 'on';

                await apiCall('/materials', {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                showAlert('Material added successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('addMaterialModal')).hide();
                loadMaterials();
                loadDashboardData();

            } catch (error) {
                console.error('Error saving material:', error);
            } finally {
                setLoading(submitButton, false);
            }
        }

        // Edit material
        async function editMaterial(id) {
            try {
                // In a real implementation, you would fetch the material data
                // and populate the form for editing
                showAlert('Edit functionality would be implemented here', 'info');
            } catch (error) {
                console.error('Error editing material:', error);
            }
        }

        // Delete material
        async function deleteMaterial(id) {
            if (confirm('Are you sure you want to delete this material?')) {
                try {
                    await apiCall(`/materials/${id}`, {
                        method: 'DELETE'
                    });

                    showAlert('Material deleted successfully!', 'success');
                    loadMaterials();
                    loadDashboardData();

                } catch (error) {
                    console.error('Error deleting material:', error);
                    showAlert('Error deleting material', 'danger');
                }
            }
        }

        // Load suppliers
        async function loadSuppliers(page = 1) {
            try {
                const search = document.getElementById('supplierSearch').value;
                const status = document.getElementById('supplierStatus').value;
                const rating = document.getElementById('supplierRating').value;

                const params = new URLSearchParams({
                    page: page,
                    limit: itemsPerPage,
                    ...(search && { search }),
                    ...(status && { status }),
                    ...(rating && { rating })
                });

                const data = await apiCall(`/suppliers?${params}`);
                renderSuppliersTable(data.data, data.pagination);

            } catch (error) {
                console.error('Error loading suppliers:', error);
            }
        }

        // Render suppliers table
        function renderSuppliersTable(suppliers, pagination) {
            const tableBody = document.querySelector('#suppliersTable tbody');
            tableBody.innerHTML = '';

            if (suppliers && suppliers.length > 0) {
                suppliers.forEach(supplier => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${supplier.name}</td>
                        <td>${supplier.contact_person || 'N/A'}</td>
                        <td>${supplier.email || 'N/A'}</td>
                        <td>${supplier.phone || 'N/A'}</td>
                        <td>${'★'.repeat(supplier.rating)}${'☆'.repeat(5 - supplier.rating)}</td>
                        <td>${supplier.materials_count}</td>
                        <td><span class="badge ${supplier.is_active ? 'bg-success' : 'bg-secondary'}">${supplier.is_active ? 'Active' : 'Inactive'}</span></td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-1" onclick="editSupplier(${supplier.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteSupplier(${supplier.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } else {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center py-4">
                            <div class="empty-state">
                                <div class="empty-state-icon">
                                    <i class="fas fa-truck"></i>
                                </div>
                                <h5>No suppliers found</h5>
                                <p class="text-muted mb-3">Add your first supplier to get started</p>
                                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addSupplierModal">
                                    <i class="fas fa-plus me-2"></i>Add Supplier
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }

            updateSupplierPagination(pagination);
            document.getElementById('supplierCountText').textContent = `Showing ${suppliers.length} of ${pagination.total} suppliers`;
        }

        // Update supplier pagination
        function updateSupplierPagination(pagination) {
            const paginationContainer = document.getElementById('supplierPagination');
            paginationContainer.innerHTML = '';

            if (pagination.totalPages <= 1) return;

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${pagination.page === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="changeSupplierPage(${pagination.page - 1})">Previous</a>`;
            paginationContainer.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= pagination.totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${pagination.page === i ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" onclick="changeSupplierPage(${i})">${i}</a>`;
                paginationContainer.appendChild(pageLi);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${pagination.page === pagination.totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="changeSupplierPage(${pagination.page + 1})">Next</a>`;
            paginationContainer.appendChild(nextLi);
        }

        // Change supplier page
        function changeSupplierPage(page) {
            currentPage.suppliers = page;
            loadSuppliers(page);
        }

        // Filter suppliers
        function filterSuppliers() {
            loadSuppliers(1);
        }

        // Reset supplier filters
        function resetSupplierFilters() {
            document.getElementById('supplierSearch').value = '';
            document.getElementById('supplierStatus').value = '';
            document.getElementById('supplierRating').value = '';
            loadSuppliers(1);
        }

        // Save supplier
        async function saveSupplier() {
            const form = document.getElementById('addSupplierForm');
            const submitButton = form.querySelector('button[type="submit"]');

            try {
                setLoading(submitButton, true);

                const formData = new FormData(form);
                const data = Object.fromEntries(formData);

                // Convert checkbox value to boolean
                data.is_active = data.is_active === 'on';

                await apiCall('/suppliers', {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                showAlert('Supplier added successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('addSupplierModal')).hide();
                loadSuppliers();
                loadDashboardData();

            } catch (error) {
                console.error('Error saving supplier:', error);
            } finally {
                setLoading(submitButton, false);
            }
        }

        // Edit supplier
        async function editSupplier(id) {
            try {
                showAlert('Edit functionality would be implemented here', 'info');
            } catch (error) {
                console.error('Error editing supplier:', error);
            }
        }

        // Delete supplier
        async function deleteSupplier(id) {
            if (confirm('Are you sure you want to delete this supplier?')) {
                try {
                    await apiCall(`/suppliers/${id}`, {
                        method: 'DELETE'
                    });

                    showAlert('Supplier deleted successfully!', 'success');
                    loadSuppliers();
                    loadDashboardData();

                } catch (error) {
                    console.error('Error deleting supplier:', error);
                    showAlert('Error deleting supplier', 'danger');
                }
            }
        }

        // Load alerts
        async function loadAlerts(page = 1) {
            try {
                const alertType = document.getElementById('alertTypeFilter').value;
                const status = document.getElementById('alertStatusFilter').value;

                const params = new URLSearchParams({
                    page: page,
                    limit: itemsPerPage,
                    ...(alertType && { alert_type: alertType }),
                    ...(status && { status })
                });

                const data = await apiCall(`/alerts?${params}`);
                renderAlertsTable(data.data, data.pagination);

                // Update alert count badge
                document.getElementById('alertCount').textContent = data.unresolvedCount || 0;

            } catch (error) {
                console.error('Error loading alerts:', error);
            }
        }

        // Render alerts table
        function renderAlertsTable(alerts, pagination) {
            const tableBody = document.querySelector('#alertsTable tbody');
            tableBody.innerHTML = '';

            if (alerts && alerts.length > 0) {
                alerts.forEach(alert => {
                    const row = document.createElement('tr');
                    let alertClass = '';
                    let alertBadge = '';

                    if (alert.alert_type === 'low_stock') {
                        alertClass = 'table-warning';
                        alertBadge = 'bg-warning';
                    } else if (alert.alert_type === 'expiry') {
                        alertClass = 'table-danger';
                        alertBadge = 'bg-danger';
                    } else if (alert.alert_type === 'over_stock') {
                        alertClass = 'table-info';
                        alertBadge = 'bg-info';
                    }

                    row.className = alertClass;
                    row.innerHTML = `
                        <td><span class="badge ${alertBadge}">${alert.alert_type.replace('_', ' ')}</span></td>
                        <td>${alert.material_name}</td>
                        <td>${alert.alert_message}</td>
                        <td>${alert.current_value || 'N/A'}</td>
                        <td>${alert.threshold_value || 'N/A'}</td>
                        <td>${new Date(alert.created_at).toLocaleDateString()}</td>
                        <td><span class="badge ${!alert.is_resolved ? 'bg-danger' : 'bg-success'}">${!alert.is_resolved ? 'Unresolved' : 'Resolved'}</span></td>
                        <td>
                            ${!alert.is_resolved ?
                            `<button class="btn btn-sm btn-outline-success" onclick="resolveAlert(${alert.id})">
                                    <i class="fas fa-check"></i>
                                </button>` :
                            ''
                        }
                            <button class="btn btn-sm btn-outline-danger ms-1" onclick="deleteAlert(${alert.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } else {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center py-4">
                            <div class="empty-state">
                                <div class="empty-state-icon">
                                    <i class="fas fa-bell-slash"></i>
                                </div>
                                <h5>No alerts found</h5>
                                <p class="text-muted">All clear! No stock alerts at the moment.</p>
                            </div>
                        </td>
                    </tr>
                `;
            }

            updateAlertPagination(pagination);
            document.getElementById('alertCountText').textContent = `Showing ${alerts.length} of ${pagination.total} alerts`;
        }

        // Update alert pagination
        function updateAlertPagination(pagination) {
            const paginationContainer = document.getElementById('alertPagination');
            paginationContainer.innerHTML = '';

            if (pagination.totalPages <= 1) return;

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${pagination.page === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="changeAlertPage(${pagination.page - 1})">Previous</a>`;
            paginationContainer.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= pagination.totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${pagination.page === i ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" onclick="changeAlertPage(${i})">${i}</a>`;
                paginationContainer.appendChild(pageLi);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${pagination.page === pagination.totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="changeAlertPage(${pagination.page + 1})">Next</a>`;
            paginationContainer.appendChild(nextLi);
        }

        // Change alert page
        function changeAlertPage(page) {
            currentPage.alerts = page;
            loadAlerts(page);
        }

        // Filter alerts
        function filterAlerts() {
            loadAlerts(1);
        }

        // Reset alert filters
        function resetAlertFilters() {
            document.getElementById('alertTypeFilter').value = '';
            document.getElementById('alertStatusFilter').value = '';
            loadAlerts(1);
        }

        // Resolve alert
        async function resolveAlert(id) {
            try {
                await apiCall(`/alerts/${id}/resolve`, {
                    method: 'POST'
                });

                showAlert('Alert resolved successfully!', 'success');
                loadAlerts();
                loadDashboardData();

            } catch (error) {
                console.error('Error resolving alert:', error);
                showAlert('Error resolving alert', 'danger');
            }
        }

        // Delete alert
        async function deleteAlert(id) {
            if (confirm('Are you sure you want to delete this alert?')) {
                try {
                    // Note: You might want to add a DELETE endpoint for alerts
                    showAlert('Delete functionality would be implemented here', 'info');
                } catch (error) {
                    console.error('Error deleting alert:', error);
                    showAlert('Error deleting alert', 'danger');
                }
            }
        }

        // Mark all alerts as resolved
        async function markAllAlertsResolved() {
            if (confirm('Are you sure you want to mark all alerts as resolved?')) {
                try {
                    await apiCall('/alerts/resolve-all', {
                        method: 'POST'
                    });

                    showAlert('All alerts resolved successfully!', 'success');
                    loadAlerts();
                    loadDashboardData();

                } catch (error) {
                    console.error('Error resolving all alerts:', error);
                    showAlert('Error resolving all alerts', 'danger');
                }
            }
        }

        // Export alerts
        function exportAlerts() {
            showAlert('Export functionality would be implemented here', 'info');
        }

        // Load batches
        async function loadBatches(page = 1) {
            try {
                const search = document.getElementById('batchSearch').value;
                const materialId = document.getElementById('batchMaterial').value;
                const referenceType = document.getElementById('batchType').value;

                const params = new URLSearchParams({
                    page: page,
                    limit: itemsPerPage,
                    ...(search && { search }),
                    ...(materialId && { material_id: materialId }),
                    ...(referenceType && { reference_type: referenceType })
                });

                const data = await apiCall(`/batches?${params}`);
                renderBatchesTable(data.data, data.pagination);

            } catch (error) {
                console.error('Error loading batches:', error);
            }
        }

        // Render batches table
// Update the batches table render function
function renderBatchesTable(batches, pagination) {
    const tableBody = document.querySelector('#batchTable tbody');
    tableBody.innerHTML = '';

    if (batches && batches.length > 0) {
        batches.forEach(batch => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${batch.batch_number || 'N/A'}</td>
                <td>${batch.material_name}</td>
                <td><span class="badge ${batch.movement_type === 'in' ? 'bg-success' : batch.movement_type === 'out' ? 'bg-danger' : 'bg-warning'}">${batch.movement_type}</span></td>
                <td>${batch.quantity}</td>
                <td>${getCurrencySymbol()} ${batch.unit_cost?.toFixed(2) || '0.00'}</td>
                <td>${getCurrencySymbol()} ${batch.total_cost?.toFixed(2) || '0.00'}</td>
                <td>${batch.reference_type} ${batch.reference_id || ''}</td>
                <td>${batch.expiry_date ? new Date(batch.expiry_date).toLocaleDateString() : 'N/A'}</td>
                <td>${new Date(batch.movement_date).toLocaleDateString()}</td>
                <td>
                    <button class="btn btn-sm btn-outline-primary me-1" onclick="editBatch(${batch.id})">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteBatch(${batch.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    } else {
        tableBody.innerHTML = `
            <tr>
                <td colspan="10" class="text-center py-4">
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="fas fa-layer-group"></i>
                        </div>
                        <h5>No batches found</h5>
                        <p class="text-muted mb-3">Add your first batch movement to get started</p>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBatchModal">
                            <i class="fas fa-plus me-2"></i>Add Batch
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }

    updateBatchPagination(pagination);
    document.getElementById('batchCountText').textContent = `Showing ${batches.length} of ${pagination.total} batches`;
}

// Update cost analysis display
function updateCostAnalysis() {
    // ... existing code ...
    
    // Update summary cards with currency
    document.getElementById('totalInventoryValue').textContent = 
        `${getCurrencySymbol()} ${data.data.inventoryValue?.toFixed(2) || '0.00'}`;
    document.getElementById('monthlyCost').textContent = 
        `${getCurrencySymbol()} ${data.data.monthlyCost?.toFixed(2) || '0.00'}`;
    document.getElementById('avgCostPerUnit').textContent = 
        `${getCurrencySymbol()} ${data.data.avgCostPerUnit?.toFixed(2) || '0.00'}`;
    
    // ... rest of the function
}
        // Update batch pagination
        function updateBatchPagination(pagination) {
            const paginationContainer = document.getElementById('batchPagination');
            paginationContainer.innerHTML = '';

            if (pagination.totalPages <= 1) return;

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${pagination.page === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" onclick="changeBatchPage(${pagination.page - 1})">Previous</a>`;
            paginationContainer.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= pagination.totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${pagination.page === i ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" onclick="changeBatchPage(${i})">${i}</a>`;
                paginationContainer.appendChild(pageLi);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${pagination.page === pagination.totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" onclick="changeBatchPage(${pagination.page + 1})">Next</a>`;
            paginationContainer.appendChild(nextLi);
        }

        // Change batch page
        function changeBatchPage(page) {
            currentPage.batches = page;
            loadBatches(page);
        }

        // Filter batches
        function filterBatches() {
            loadBatches(1);
        }

        // Reset batch filters
        function resetBatchFilters() {
            document.getElementById('batchSearch').value = '';
            document.getElementById('batchMaterial').value = '';
            document.getElementById('batchType').value = '';
            loadBatches(1);
        }

        // Save batch
        async function saveBatch() {
            const form = document.getElementById('addBatchForm');
            const submitButton = form.querySelector('button[type="submit"]');

            try {
                setLoading(submitButton, true);

                const formData = new FormData(form);
                const data = Object.fromEntries(formData);

                await apiCall('/batches', {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                showAlert('Stock movement recorded successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('addBatchModal')).hide();
                loadBatches();
                loadDashboardData();
                loadMaterials(); // Refresh materials to update stock levels

            } catch (error) {
                console.error('Error saving batch:', error);
            } finally {
                setLoading(submitButton, false);
            }
        }

        // Edit batch
        async function editBatch(id) {
            try {
                showAlert('Edit functionality would be implemented here', 'info');
            } catch (error) {
                console.error('Error editing batch:', error);
            }
        }

        // Delete batch
        async function deleteBatch(id) {
            if (confirm('Are you sure you want to delete this batch?')) {
                try {
                    // Note: You might want to add a DELETE endpoint for batches
                    showAlert('Delete functionality would be implemented here', 'info');
                } catch (error) {
                    console.error('Error deleting batch:', error);
                    showAlert('Error deleting batch', 'danger');
                }
            }
        }

        // Update cost analysis
        async function updateCostAnalysis() {
            try {
                const period = document.getElementById('analysisPeriod').value;
                const materialId = document.getElementById('analysisMaterial').value;
                const supplierId = document.getElementById('analysisSupplier').value;

                const params = new URLSearchParams({
                    period: period,
                    ...(materialId && { material_id: materialId }),
                    ...(supplierId && { supplier_id: supplierId })
                });

                const data = await apiCall(`/cost-analysis?${params}`);

                // Update summary cards
                document.getElementById('totalInventoryValue').textContent =
                    ((shop && shop.currency) || 'PKR') + ' ' + data.data.inventoryValue.toFixed(2);
                document.getElementById('monthlyCost').textContent =
                    ((shop && shop.currency) || 'PKR') + ' ' + data.data.monthlyCost.toFixed(2);
                document.getElementById('avgCostPerUnit').textContent =
                    ((shop && shop.currency) || 'PKR') + ' ' + data.data.avgCostPerUnit.toFixed(2);

                // Update charts
                updateCharts(data.data.costTrends, data.data.costByCategory);

            } catch (error) {
                console.error('Error loading cost analysis:', error);
            }
        }

        // Update charts
        function updateCharts(costTrends, costByCategory) {
            const costTrendCtx = document.getElementById('costTrendChart').getContext('2d');
            const costCategoryCtx = document.getElementById('costCategoryChart').getContext('2d');

            // Destroy existing charts if they exist
            if (costTrendChart) {
                costTrendChart.destroy();
            }
            if (costCategoryChart) {
                costCategoryChart.destroy();
            }

            // Create cost trend chart
            costTrendChart = new Chart(costTrendCtx, {
                type: 'line',
                data: {
                    labels: costTrends.map(item => item.period),
                    datasets: [{
                        label: 'Material Cost',
                        data: costTrends.map(item => item.total_cost),
                        borderColor: '#0d6efd',
                        backgroundColor: 'rgba(13, 110, 253, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Material Costs Over Time'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Cost (' + ((shop && shop.currency) || 'PKR') + ')'
                            }
                        }
                    }
                }
            });

            // Create cost by category chart
            costCategoryChart = new Chart(costCategoryCtx, {
                type: 'doughnut',
                data: {
                    labels: costByCategory.map(item => item.category),
                    datasets: [{
                        data: costByCategory.map(item => item.inventory_value),
                        backgroundColor: [
                            '#0d6efd', '#198754', '#ffc107', '#dc3545', '#6f42c1',
                            '#e83e8c', '#fd7e14', '#20c997', '#6610f2', '#6c757d'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            text: 'Cost Distribution by Category'
                        }
                    }
                }
            });
        }

        // Load suppliers for analysis filter
        async function loadSuppliersForAnalysis() {
            try {
                const data = await apiCall('/suppliers?limit=1000');
                const analysisSupplierSelect = document.getElementById('analysisSupplier');

                // Clear existing options except the first one
                while (analysisSupplierSelect.options.length > 1) {
                    analysisSupplierSelect.remove(1);
                }

                data.data.forEach(supplier => {
                    const option = document.createElement('option');
                    option.value = supplier.id;
                    option.textContent = supplier.name;
                    analysisSupplierSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading suppliers for analysis:', error);
            }
        }

        // Initialize cost analysis when the tab is shown
        document.getElementById('analysis-tab').addEventListener('shown.bs.tab', function () {
            loadSuppliersForAnalysis();
            updateCostAnalysis();
        });

    </script>
    <script>
    // Make shop data available to JavaScript
    window.shopCurrency = '<%= (shop && shop.currency) || "PKR" %>';
    window.shopData = <%- JSON.stringify(shop || {}) %>;
    
    console.log('🏪 Shop data loaded:', window.shopData);
</script>
</body>

</html>