<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Business Reports - <%= shop.name %>
    </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: <%=shop.primary_color || '#2c5aa0' %>;
            --secondary-color: <%=shop.secondary_color || '#6c757d' %>;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --info-color: #3b82f6;
        }

        body {
            background-color: #f8fafc;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .dashboard-header {
            background-color: white;
            border-bottom: 1px solid #e5e7eb;
            padding: 1.5rem 0;
            margin-bottom: 1.5rem;
        }

        .stat-card {
            background: white;
            border-radius: 0.5rem;
            padding: 1.25rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            border: 1px solid #e5e7eb;
            transition: all 0.2s ease;
            height: 100%;
        }

        .stat-card:hover {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        .stat-value {
            font-size: 1.75rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 0.25rem;
        }

        .stat-label {
            color: #6b7280;
            font-size: 0.875rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .stat-trend {
            font-size: 0.8rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .trend-up {
            color: var(--success-color);
        }

        .trend-down {
            color: #ef4444;
        }

        .trend-neutral {
            color: #6b7280;
        }

        .filter-card {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            margin-bottom: 1.5rem;
            border: 1px solid #e5e7eb;
        }

        .filter-header {
            background: #f8fafc;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            border-radius: 0.5rem 0.5rem 0 0;
        }

        .filter-body {
            padding: 1.5rem;
        }

        .chart-container {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            border: 1px solid #e5e7eb;
        }

        .chart-title {
            color: #374151;
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .data-table {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            overflow: hidden;
            border: 1px solid #e5e7eb;
        }

        .table-header {
            background: #f8fafc;
            padding: 1.25rem 1.5rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .table th {
            background: #f8fafc;
            color: #374151;
            font-weight: 600;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            border-bottom: 2px solid #e5e7eb;
            padding: 0.75rem 1rem;
        }

        .table td {
            padding: 1rem;
            border-color: #f3f4f6;
            vertical-align: middle;
        }

        .table tbody tr:hover {
            background-color: #f8fafc;
        }

        .badge-pill {
            border-radius: 50px;
            padding: 0.375rem 0.75rem;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .btn-primary {
            background-color: var(--primary-color);
            border: none;
            border-radius: 0.375rem;
            padding: 0.5rem 1rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #1e429f;
            transform: translateY(-1px);
        }

        .btn-outline {
            border: 1px solid #e5e7eb;
            border-radius: 0.375rem;
            padding: 0.5rem 1rem;
            font-weight: 500;
            color: #374151;
            transition: all 0.2s ease;
        }

        .btn-outline:hover {
            border-color: var(--primary-color);
            color: var(--primary-color);
            background: transparent;
        }

        .form-control,
        .form-select {
            border-radius: 0.375rem;
            border: 1px solid #e5e7eb;
            padding: 0.5rem 0.75rem;
            transition: all 0.2s ease;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(44, 90, 160, 0.1);
        }

        .quick-action-btn {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 1rem;
            text-align: center;
            transition: all 0.2s ease;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
            display: block;
        }

        .quick-action-btn:hover {
            border-color: var(--primary-color);
            color: inherit;
            text-decoration: none;
        }

        .quick-action-icon {
            font-size: 1.25rem;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            color: #6b7280;
        }

        .empty-state-icon {
            font-size: 3rem;
            color: #d1d5db;
            margin-bottom: 1rem;
        }

        .loading-spinner {
            display: inline-block;
            width: 2rem;
            height: 2rem;
            border: 3px solid #f3f4f6;
            border-radius: 50%;
            border-top-color: var(--primary-color);
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        .summary-row {
            background: #f8fafc;
            font-weight: 600;
            color: #374151;
        }

        .help-text {
            color: #6b7280;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .section-title {
            color: #1f2937;
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .card-title {
            color: #374151;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        @media (max-width: 768px) {
            .stat-value {
                font-size: 1.5rem;
            }

            .dashboard-header {
                padding: 1rem 0;
                margin-bottom: 1rem;
            }

            .filter-body .row>div {
                margin-bottom: 1rem;
            }
        }
    </style>
</head>

<body>
    <!-- Header -->
    <div class="dashboard-header">
        <div class="container-fluid">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="h3 mb-2"><i class="fas fa-chart-pie me-2"></i>Business Reports</h1>
                    <p class="mb-0 text-muted">Track your sales performance and business insights</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <a href="/" class="btn btn-outline btn-sm">
                        <i class="fas fa-arrow-left me-1"></i>Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <!-- Quick Date Selection -->
        <div class="filter-card">
            <div class="filter-header">
                <h5 class="mb-0"><i class="fas fa-calendar-alt me-2"></i>Select Time Period</h5>
            </div>
            <div class="filter-body">
                <div class="row g-3 align-items-end">
                    <div class="col-md-3">
                        <label class="form-label fw-semibold">Quick Periods</label>
                        <select class="form-select" id="quickDateRange">
                            <option value="today">Today</option>
                            <option value="yesterday">Yesterday</option>
                            <option value="this_week" selected>This Week</option>
                            <option value="last_week">Last Week</option>
                            <option value="this_month">This Month</option>
                            <option value="last_month">Last Month</option>
                            <option value="custom">Custom Range</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-semibold">From Date</label>
                        <input type="date" class="form-control" id="startDate">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label fw-semibold">To Date</label>
                        <input type="date" class="form-control" id="endDate">
                    </div>
                    <div class="col-md-3">
                        <button class="btn btn-primary w-100" id="applyDateRange">
                            <i class="fas fa-play me-1"></i>Generate Report
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Key Metrics -->
        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stat-card">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <div class="stat-label">Total Revenue</div>
                            <div class="stat-value" id="totalRevenue">₨0</div>
                        </div>
                        <i class="fas fa-money-bill-wave text-success fs-2 opacity-75"></i>
                    </div>
                    <div class="stat-trend trend-up" id="revenueTrend">
                        <i class="fas fa-arrow-up"></i>
                        <span>0% from last period</span>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stat-card">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <div class="stat-label">Total Sales</div>
                            <div class="stat-value" id="totalSales">0</div>
                        </div>
                        <i class="fas fa-shopping-cart text-info fs-2 opacity-75"></i>
                    </div>
                    <div class="stat-trend trend-up" id="salesTrend">
                        <i class="fas fa-arrow-up"></i>
                        <span>0% from last period</span>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stat-card">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <div class="stat-label">Customers</div>
                            <div class="stat-value" id="totalCustomers">0</div>
                        </div>
                        <i class="fas fa-users text-warning fs-2 opacity-75"></i>
                    </div>
                    <div class="stat-trend trend-up" id="customersTrend">
                        <i class="fas fa-arrow-up"></i>
                        <span>0% from last period</span>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stat-card">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <div class="stat-label">Avg. Transaction</div>
                            <div class="stat-value" id="avgTransaction">₨0</div>
                        </div>
                        <i class="fas fa-receipt text-purple fs-2 opacity-75"></i>
                    </div>
                    <div class="stat-trend trend-up" id="transactionTrend">
                        <i class="fas fa-arrow-up"></i>
                        <span>0% from last period</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row mb-4">
            <div class="col-xl-8 mb-4">
                <div class="chart-container">
                    <h5 class="chart-title">
                        <i class="fas fa-chart-line text-primary"></i>
                        Sales Performance
                    </h5>
                    <canvas id="salesChart" height="250"></canvas>
                    <div class="help-text">Daily sales revenue for selected period</div>
                </div>
            </div>
            <div class="col-xl-4 mb-4">
                <div class="chart-container">
                    <h5 class="chart-title">
                        <i class="fas fa-credit-card text-success"></i>
                        Payment Methods
                    </h5>
                    <canvas id="paymentChart" height="250"></canvas>
                    <div class="help-text">Distribution of payment methods used</div>
                </div>
            </div>
        </div>

        <!-- Summary Footer -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="chart-container">
                    <div class="row text-center">
                        <div class="col-md-3">
                            <div class="stat-label">Total Sales Amount</div>
                            <div class="stat-value text-primary" id="footerTotal">₨0</div>
                        </div>
                        <div class="col-md-3">
                            <div class="stat-label">Total Discount</div>
                            <div class="stat-value text-warning" id="footerDiscount">₨0</div>
                        </div>
                        <div class="col-md-3">
                            <div class="stat-label">Tax Collected</div>
                            <div class="stat-value text-info" id="footerTax">₨0</div>
                        </div>
                        <div class="col-md-3">
                            <div class="stat-label">Net Revenue</div>
                            <div class="stat-value text-success" id="footerSubtotal">₨0</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sales Details Table -->
        <div class="data-table">
            <div class="table-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-list me-2"></i>Sales Details</h5>
                    <span class="badge bg-primary badge-pill">
                        <span id="reportCount">0</span> transactions
                    </span>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-hover mb-0" id="reportsTable">
                    <thead>
                        <tr>
                            <th>Date & Time</th>
                            <th>Receipt No.</th>
                            <th>Customer</th>
                            <th class="text-end">Items</th>
                            <th class="text-end">Amount</th>
                            <th>Payment</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="reportsTableBody">
                        <!-- Data will be loaded here -->
                    </tbody>
                </table>
            </div>

            <!-- Loading State -->
            <div class="empty-state" id="loadingState">
                <div class="loading-spinner mb-3"></div>
                <h5>Loading Report Data</h5>
                <p class="text-muted">Please wait while we gather your business insights...</p>
            </div>

            <!-- Empty State -->
            <div class="empty-state" id="emptyState" style="display: none;">
                <div class="empty-state-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <h5>No Sales Data Found</h5>
                <p class="text-muted mb-3">No transactions match your current filters for the selected period.</p>
                <button class="btn btn-primary" id="resetEmptyFilters">
                    <i class="fas fa-redo me-1"></i>Try Different Filters
                </button>
            </div>

            <!-- Pagination -->
            <div class="table-header border-top" id="paginationContainer" style="display: none;">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center mb-0" id="pagination">
                        <!-- Pagination will be loaded here -->
                    </ul>
                </nav>
            </div>
        </div>
        <br>
        <br>
        <br>

        <!-- Quick Actions & Filters -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="filter-card">
                    <div class="filter-header">
                        <h5 class="mb-0"><i class="fas fa-filter me-2"></i>Filter Results</h5>
                    </div>
                    <div class="filter-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label fw-semibold">Payment Type</label>
                                <select class="form-select" id="paymentMethodFilter">
                                    <option value="all">All Payment Methods</option>
                                    <option value="cash">Cash</option>
                                    <option value="card">Credit/Debit Card</option>
                                    <option value="digital">Digital Wallet</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label fw-semibold">Sale Amount</label>
                                <select class="form-select" id="salesRangeFilter">
                                    <option value="all">All Amounts</option>
                                    <option value="low">Small (Under ₨1,000)</option>
                                    <option value="medium">Medium (₨1,000 - ₨5,000)</option>
                                    <option value="high">Large (Over ₨5,000)</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label fw-semibold">View By</label>
                                <select class="form-select" id="timePeriodFilter">
                                    <option value="daily">Daily View</option>
                                    <option value="weekly">Weekly View</option>
                                    <option value="monthly">Monthly View</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="row g-3">
                    <div class="col-6">
                        <a href="#" class="quick-action-btn" id="exportReport">
                            <div class="quick-action-icon">
                                <i class="fas fa-file-excel"></i>
                            </div>
                            <div class="fw-semibold">Export to Excel</div>
                            <small class="text-muted">Download report</small>
                        </a>
                    </div>
                    <div class="col-6">
                        <a href="#" class="quick-action-btn" id="printReport">
                            <div class="quick-action-icon">
                                <i class="fas fa-print"></i>
                            </div>
                            <div class="fw-semibold">Print Report</div>
                            <small class="text-muted">Print summary</small>
                        </a>
                    </div>
                    <div class="col-6">
                        <a href="#" class="quick-action-btn" id="resetFilters">
                            <div class="quick-action-icon">
                                <i class="fas fa-refresh"></i>
                            </div>
                            <div class="fw-semibold">Reset Filters</div>
                            <small class="text-muted">Clear all</small>
                        </a>
                    </div>
                    <div class="col-6">
                        <a href="/products" class="quick-action-btn">
                            <div class="quick-action-icon">
                                <i class="fas fa-box"></i>
                            </div>
                            <div class="fw-semibold">Products</div>
                            <small class="text-muted">Manage items</small>
                        </a>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Bill Details Modal -->
    <div class="modal fade" id="billDetailsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-receipt me-2"></i>
                        Receipt Details - <span id="billNumber"></span>
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="billDetailsContent">
                    <!-- Bill details will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</body>

<script>
    // Daily Reports JavaScript - Simplified for non-technical users
    class BusinessReports {
        constructor() {
            this.currentPage = 1;
            this.limit = 10;
            this.filters = {
                startDate: '',
                endDate: '',
                paymentMethod: 'all',
                salesRange: 'all',
                timePeriod: 'daily'
            };
            this.charts = {};
            this.init();
        }

        init() {
            console.log('🚀 Initializing Business Reports...');
            this.setupDefaultDates();
            this.setupEventListeners();
            this.loadReportData();
        }

        setupDefaultDates() {
            const today = new Date();
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(today.getDate() - 7);

            this.filters.startDate = oneWeekAgo.toISOString().split('T')[0];
            this.filters.endDate = today.toISOString().split('T')[0];

            document.getElementById('startDate').value = this.filters.startDate;
            document.getElementById('endDate').value = this.filters.endDate;

            console.log('📅 Default dates set:', this.filters.startDate, 'to', this.filters.endDate);
        }

        setupEventListeners() {
            // Main action buttons
            document.getElementById('applyDateRange').addEventListener('click', () => this.updateReport());
            document.getElementById('resetFilters').addEventListener('click', () => this.resetAllFilters());
            document.getElementById('resetEmptyFilters').addEventListener('click', () => this.resetAllFilters());

            // Quick actions
            document.getElementById('exportReport').addEventListener('click', (e) => {
                e.preventDefault();
                this.exportToExcel();
            });
            document.getElementById('printReport').addEventListener('click', (e) => {
                e.preventDefault();
                this.printReport();
            });

            // Filter changes
            document.getElementById('quickDateRange').addEventListener('change', (e) => this.handleQuickDate(e.target.value));
            document.getElementById('paymentMethodFilter').addEventListener('change', (e) => {
                this.filters.paymentMethod = e.target.value;
                this.updateReport();
            });
            document.getElementById('salesRangeFilter').addEventListener('change', (e) => {
                this.filters.salesRange = e.target.value;
                this.updateReport();
            });
            document.getElementById('timePeriodFilter').addEventListener('change', (e) => {
                this.filters.timePeriod = e.target.value;
                this.updateReport();
            });

            // Date inputs
            document.getElementById('startDate').addEventListener('change', (e) => {
                this.filters.startDate = e.target.value;
                document.getElementById('quickDateRange').value = 'custom';
            });
            document.getElementById('endDate').addEventListener('change', (e) => {
                this.filters.endDate = e.target.value;
                document.getElementById('quickDateRange').value = 'custom';
            });
        }

        handleQuickDate(range) {
            const today = new Date();
            let startDate, endDate;

            switch (range) {
                case 'today':
                    startDate = endDate = today;
                    break;
                case 'yesterday':
                    startDate = endDate = new Date(today);
                    startDate.setDate(today.getDate() - 1);
                    break;
                case 'this_week':
                    startDate = new Date(today);
                    startDate.setDate(today.getDate() - today.getDay());
                    endDate = new Date(today);
                    endDate.setDate(today.getDate() + (6 - today.getDay()));
                    break;
                case 'last_week':
                    startDate = new Date(today);
                    startDate.setDate(today.getDate() - today.getDay() - 7);
                    endDate = new Date(today);
                    endDate.setDate(today.getDate() - today.getDay() - 1);
                    break;
                case 'this_month':
                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                    endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                    break;
                case 'last_month':
                    startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                    endDate = new Date(today.getFullYear(), today.getMonth(), 0);
                    break;
                default:
                    return;
            }

            this.filters.startDate = startDate.toISOString().split('T')[0];
            this.filters.endDate = endDate.toISOString().split('T')[0];

            document.getElementById('startDate').value = this.filters.startDate;
            document.getElementById('endDate').value = this.filters.endDate;

            this.updateReport();
        }

        async loadReportData() {
            this.showLoadingState();

            try {
                const params = new URLSearchParams({
                    page: this.currentPage,
                    limit: this.limit,
                    ...this.filters
                });

                console.log('📊 Loading report with filters:', Object.fromEntries(params));

                const response = await fetch(`/reports/api/reports?${params}`);

                if (!response.ok) {
                    throw new Error(`Server returned ${response.status}`);
                }

                const data = await response.json();
                console.log('✅ Report data received:', data);

                if (data.success) {
                    this.displayBusinessMetrics(data.stats);
                    this.displaySalesTable(data.reports);
                    this.setupPagination(data.totalPages);
                    this.createVisualCharts(data.charts);
                    this.hideLoadingState();

                    if (data.message) {
                        this.showNotification(data.message, 'info');
                    }
                } else {
                    throw new Error(data.message || 'Failed to load report');
                }
            } catch (error) {
                console.error('❌ Error loading report:', error);
                this.showNotification('Unable to load report data. Please try again.', 'error');
                this.hideLoadingState();
            }
        }

        displayBusinessMetrics(stats) {
            // Update main metrics
            document.getElementById('totalRevenue').textContent = this.formatMoney(stats.totalRevenue);
            document.getElementById('totalSales').textContent = stats.totalSales.toLocaleString();
            document.getElementById('totalCustomers').textContent = stats.totalCustomers.toLocaleString();
            document.getElementById('avgTransaction').textContent = this.formatMoney(stats.avgTransaction);

            // Update trends with simple icons
            this.updateMetricTrend('revenueTrend', stats.revenueTrend);
            this.updateMetricTrend('salesTrend', stats.salesTrend);
            this.updateMetricTrend('customersTrend', stats.customersTrend);
            this.updateMetricTrend('transactionTrend', stats.transactionTrend);

            // Update footer summary
            document.getElementById('footerTotal').textContent = this.formatMoney(stats.totalRevenue);
            document.getElementById('footerSubtotal').textContent = this.formatMoney(stats.totalRevenue);
        }

        updateMetricTrend(elementId, trend) {
            const element = document.getElementById(elementId);
            const trendValue = Math.abs(trend);

            if (trend > 0) {
                element.innerHTML = `<i class="fas fa-arrow-up"></i><span>${trendValue}% increase</span>`;
                element.className = 'stat-trend trend-up';
            } else if (trend < 0) {
                element.innerHTML = `<i class="fas fa-arrow-down"></i><span>${trendValue}% decrease</span>`;
                element.className = 'stat-trend trend-down';
            } else {
                element.innerHTML = `<i class="fas fa-minus"></i><span>No change</span>`;
                element.className = 'stat-trend trend-neutral';
            }
        }

        displaySalesTable(sales) {
            const tableBody = document.getElementById('reportsTableBody');
            const emptyState = document.getElementById('emptyState');
            const tableElement = document.querySelector('.table-responsive');

            if (!sales || sales.length === 0) {
                tableBody.innerHTML = '';
                emptyState.style.display = 'block';
                tableElement.style.display = 'none';
                document.getElementById('reportCount').textContent = '0';
                return;
            }

            emptyState.style.display = 'none';
            tableElement.style.display = 'block';

            let html = '';
            let totalRevenue = 0;

            sales.forEach(sale => {
                totalRevenue += parseFloat(sale.total_amount);
                const saleDate = new Date(sale.created_at);

                html += `
                <tr>
                    <td>
                        <div class="fw-semibold">${saleDate.toLocaleDateString()}</div>
                        <small class="text-muted">${saleDate.toLocaleTimeString()}</small>
                    </td>
                    <td>
                        <strong class="text-primary">${sale.bill_number}</strong>
                    </td>
                    <td>
                        <div>${sale.customer_name || 'Walk-in Customer'}</div>
                        ${sale.customer_phone ? `<small class="text-muted">${sale.customer_phone}</small>` : ''}
                    </td>
                    <td class="text-end fw-semibold">${sale.items_count || 0}</td>
                    <td class="text-end fw-bold text-success">${this.formatMoney(sale.total_amount)}</td>
                    <td>
                        <span class="badge bg-light text-dark badge-pill">
                            ${sale.payment_method || 'Cash'}
                        </span>
                    </td>
                    <td>
                        <span class="badge ${sale.due_amount > 0 ? 'bg-warning' : 'bg-success'} badge-pill">
                            ${sale.due_amount > 0 ? 'Balance Due' : 'Paid'}
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary view-receipt" data-bill-id="${sale.id}">
                            <i class="fas fa-eye"></i> View
                        </button>
                    </td>
                </tr>
            `;
            });

            tableBody.innerHTML = html;
            document.getElementById('reportCount').textContent = sales.length;

            // Add click events to view buttons
            document.querySelectorAll('.view-receipt').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const billId = e.target.closest('.view-receipt').getAttribute('data-bill-id');
                    this.showReceiptDetails(billId);
                });
            });
        }

        setupPagination(totalPages) {
            const container = document.getElementById('paginationContainer');
            const pagination = document.getElementById('pagination');

            if (totalPages <= 1) {
                container.style.display = 'none';
                return;
            }

            container.style.display = 'block';

            let html = '';
            const maxPages = 5;
            let startPage = Math.max(1, this.currentPage - 2);
            let endPage = Math.min(totalPages, startPage + maxPages - 1);

            // Previous
            html += `<li class="page-item ${this.currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${this.currentPage - 1}">Previous</a>
                 </li>`;

            // Pages
            for (let i = startPage; i <= endPage; i++) {
                html += `<li class="page-item ${i === this.currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                     </li>`;
            }

            // Next
            html += `<li class="page-item ${this.currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${this.currentPage + 1}">Next</a>
                 </li>`;

            pagination.innerHTML = html;

            // Add page click events
            pagination.querySelectorAll('.page-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const page = parseInt(link.getAttribute('data-page'));
                    if (page && page !== this.currentPage) {
                        this.currentPage = page;
                        this.loadReportData();
                    }
                });
            });
        }

        createVisualCharts(chartData) {
            this.createSalesChart(chartData.salesTrend);
            this.createPaymentChart(chartData.paymentMethods);
        }

        createSalesChart(salesData) {
            const ctx = document.getElementById('salesChart').getContext('2d');

            if (this.charts.salesChart) {
                this.charts.salesChart.destroy();
            }

            this.charts.salesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: salesData.labels,
                    datasets: [{
                        label: 'Sales Revenue',
                        data: salesData.data,
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: (context) => `Revenue: ${this.formatMoney(context.raw)}`
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: (value) => this.formatMoney(value)
                            }
                        }
                    }
                }
            });
        }

        createPaymentChart(paymentData) {
            const ctx = document.getElementById('paymentChart').getContext('2d');
            const colors = ['#10b981', '#3b82f6', '#f59e0b', '#ef4444', '#8b5cf6'];

            if (this.charts.paymentChart) {
                this.charts.paymentChart.destroy();
            }

            this.charts.paymentChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: paymentData.labels,
                    datasets: [{
                        data: paymentData.data,
                        backgroundColor: colors,
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'bottom' },
                        tooltip: {
                            callbacks: {
                                label: (context) => {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percent = ((context.raw / total) * 100).toFixed(1);
                                    return `${context.label}: ${this.formatMoney(context.raw)} (${percent}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        async showReceiptDetails(billId) {
            try {
                const response = await fetch(`/reports/api/reports/bills/${billId}`);
                const data = await response.json();

                if (data.success) {
                    this.displayReceiptModal(data.bill, data.items);
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error loading receipt:', error);
                this.showNotification('Could not load receipt details', 'error');
            }
        }

        displayReceiptModal(bill, items) {
            document.getElementById('billNumber').textContent = bill.bill_number;

            let html = `
            <div class="row mb-4">
                <div class="col-md-6">
                    <h6 class="fw-semibold">Customer Information</h6>
                    <p class="mb-1"><strong>Name:</strong> ${bill.customer_name || 'Walk-in Customer'}</p>
                    ${bill.customer_phone ? `<p class="mb-0"><strong>Phone:</strong> ${bill.customer_phone}</p>` : ''}
                </div>
                <div class="col-md-6">
                    <h6 class="fw-semibold">Transaction Details</h6>
                    <p class="mb-1"><strong>Date:</strong> ${new Date(bill.created_at).toLocaleString()}</p>
                    <p class="mb-0"><strong>Payment:</strong> <span class="badge bg-primary">${bill.payment_method || 'Cash'}</span></p>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-sm">
                    <thead class="table-light">
                        <tr>
                            <th>Item</th>
                            <th class="text-end">Qty</th>
                            <th class="text-end">Price</th>
                            <th class="text-end">Total</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

            items.forEach(item => {
                html += `
                <tr>
                    <td>${item.product_name}</td>
                    <td class="text-end">${item.quantity}</td>
                    <td class="text-end">${this.formatMoney(item.unit_price)}</td>
                    <td class="text-end fw-semibold">${this.formatMoney(item.total_price)}</td>
                </tr>
            `;
            });

            html += `
                    </tbody>
                    <tfoot class="table-light">
                        <tr>
                            <td colspan="3" class="text-end fw-semibold">Subtotal:</td>
                            <td class="text-end fw-semibold">${this.formatMoney(bill.subtotal)}</td>
                        </tr>
                        <tr>
                            <td colspan="3" class="text-end fw-semibold">Discount:</td>
                            <td class="text-end fw-semibold text-danger">-${this.formatMoney(bill.discount)}</td>
                        </tr>
                        <tr>
                            <td colspan="3" class="text-end fw-semibold">Tax:</td>
                            <td class="text-end fw-semibold">${this.formatMoney(bill.tax)}</td>
                        </tr>
                        <tr class="table-active">
                            <td colspan="3" class="text-end fw-bold fs-6">Total Amount:</td>
                            <td class="text-end fw-bold fs-6 text-success">${this.formatMoney(bill.total_amount)}</td>
                        </tr>
                        <tr>
                            <td colspan="3" class="text-end fw-semibold">Amount Paid:</td>
                            <td class="text-end fw-semibold text-success">${this.formatMoney(bill.paid_amount)}</td>
                        </tr>
                        ${bill.due_amount > 0 ? `
                        <tr class="table-warning">
                            <td colspan="3" class="text-end fw-bold">Balance Due:</td>
                            <td class="text-end fw-bold text-warning">${this.formatMoney(bill.due_amount)}</td>
                        </tr>
                        ` : ''}
                    </tfoot>
                </table>
            </div>
        `;

            document.getElementById('billDetailsContent').innerHTML = html;
            new bootstrap.Modal(document.getElementById('billDetailsModal')).show();
        }

        updateReport() {
            this.currentPage = 1;
            this.loadReportData();
        }

        resetAllFilters() {
            this.currentPage = 1;
            this.filters = {
                startDate: '',
                endDate: '',
                paymentMethod: 'all',
                salesRange: 'all',
                timePeriod: 'daily'
            };

            // Reset UI elements
            document.getElementById('quickDateRange').value = 'this_week';
            document.getElementById('paymentMethodFilter').value = 'all';
            document.getElementById('salesRangeFilter').value = 'all';
            document.getElementById('timePeriodFilter').value = 'daily';

            this.setupDefaultDates();
            this.loadReportData();

            this.showNotification('All filters have been reset', 'success');
        }

        async exportToExcel() {
            try {
                const params = new URLSearchParams(this.filters);
                const response = await fetch(`/reports/api/reports/export?${params}`);
                const blob = await response.blob();

                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `business-report-${new Date().toISOString().split('T')[0]}.xlsx`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);

                this.showNotification('Report exported successfully', 'success');
            } catch (error) {
                console.error('Export error:', error);
                this.showNotification('Failed to export report', 'error');
            }
        }

        printReport() {
            window.print();
        }

        formatMoney(amount) {
            return new Intl.NumberFormat('en-PK', {
                style: 'currency',
                currency: 'PKR',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        }

        showLoadingState() {
            document.getElementById('loadingState').style.display = 'block';
            document.getElementById('emptyState').style.display = 'none';
            document.querySelector('.table-responsive').style.display = 'none';
            document.getElementById('paginationContainer').style.display = 'none';
        }

        hideLoadingState() {
            document.getElementById('loadingState').style.display = 'none';
        }

        showNotification(message, type = 'info') {
            // Simple notification - you can replace with a proper toast library
            const alertType = type === 'error' ? 'danger' : type;
            alert(`${type.toUpperCase()}: ${message}`);

            // In production, use: toastr[type](message);
            // Or implement a proper notification system
        }
    }

    // Start the application when page loads
    document.addEventListener('DOMContentLoaded', function () {
        new BusinessReports();
        console.log('📈 Business Reports Dashboard Ready!');
    });
</script>

</html>