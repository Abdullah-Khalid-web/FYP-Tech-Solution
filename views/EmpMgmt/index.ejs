<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Management System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: <%=shop.primary_color || '#007bff' %>;
            --danger-color: #dc3545;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
        }

        .employee-card {
            border-left: 4px solid var(--primary-color);
            transition: all 0.3s ease;
        }

        .employee-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .employee-role-owner {
            border-left-color: #dc3545;
        }

        .employee-role-manager {
            border-left-color: #28a745;
        }

        .employee-role-cashier {
            border-left-color: #17a2b8;
        }

        .employee-role-other {
            border-left-color: #6c757d;
        }

        .filter-section {
            background-color: #f8f9fa;
            border-radius: 0.5rem;
            padding: 1.5rem;
        }

        .stats-card {
            background: linear-gradient(135deg, var(--primary-color), #0056b3);
            color: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.05);
        }

        .badge-owner {
            background-color: #dc3545;
        }

        .badge-manager {
            background-color: #28a745;
        }

        .badge-cashier {
            background-color: #17a2b8;
        }

        .badge-other {
            background-color: #6c757d;
        }

        .badge-active {
            background-color: #28a745;
        }

        .badge-inactive {
            background-color: #6c757d;
        }

        .action-buttons .btn {
            margin-right: 0.25rem;
            margin-bottom: 0.25rem;
        }

        .salary-paid {
            color: #28a745;
            font-weight: bold;
        }

        .salary-pending {
            color: #ffc107;
            font-weight: bold;
        }

        .loan-active {
            color: #dc3545;
            font-weight: bold;
        }

        .loan-paid {
            color: #28a745;
            font-weight: bold;
        }

        @media (max-width: 768px) {
            .action-buttons .btn {
                width: 100%;
                margin-right: 0;
            }
        }
    </style>
</head>

<body class="bg-light">
    <div class="container-fluid py-3">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h2 class="mb-0"><i class="fas fa-users me-2"></i>Employee Management</h2>
                        <p class="text-muted mb-0">Manage employees, salaries, and loans for <strong id="shopName">
                                <%= shop.name %>
                            </strong></p>
                    </div>
                    <div>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addEmployeeModal">
                            <i class="fas fa-plus me-1"></i>Add Employee
                        </button>
                        <a href="/" class="btn btn-outline-secondary ms-2">
                            <i class="fas fa-home me-1"></i>Dashboard
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-3">
                <div class="stats-card">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h4 class="mb-0" id="totalEmployees">
                                <%= totalStats.totalEmployees %>
                            </h4>
                            <p class="mb-0">Total Employees</p>
                        </div>
                        <i class="fas fa-users fa-2x opacity-50"></i>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-3">
                <div class="card h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="text-success mb-0" id="activeEmployees">
                                    <%= totalStats.activeEmployees %>
                                </h4>
                                <p class="mb-0">Active Employees</p>
                            </div>
                            <i class="fas fa-user-check fa-2x text-success opacity-50"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-3">
                <div class="card h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="text-warning mb-0" id="pendingSalaries">
                                    <%= totalStats.pendingSalaries %>
                                </h4>
                                <p class="mb-0">Pending Salaries</p>
                            </div>
                            <i class="fas fa-money-bill-wave fa-2x text-warning opacity-50"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-3">
                <div class="card h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4 class="text-danger mb-0" id="activeLoans">
                                    <%= totalStats.activeLoans %>
                                </h4>
                                <p class="mb-0">Active Loans</p>
                            </div>
                            <i class="fas fa-hand-holding-usd fa-2x text-danger opacity-50"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="filter-section">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Role</label>
                            <select class="form-select" id="roleFilter">
                                <option value="all">All Roles</option>
                                <option value="owner" <%=query.role==='owner' ? 'selected' : '' %>>Owner</option>
                                <option value="manager" <%=query.role==='manager' ? 'selected' : '' %>>Manager</option>
                                <option value="cashier" <%=query.role==='cashier' ? 'selected' : '' %>>Cashier</option>
                                <option value="other" <%=query.role==='other' ? 'selected' : '' %>>Other</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="statusFilter">
                                <option value="all">All Status</option>
                                <option value="active" <%=query.status==='active' ? 'selected' : '' %>>Active</option>
                                <option value="inactive" <%=query.status==='inactive' ? 'selected' : '' %>>Inactive
                                </option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Search</label>
                            <input type="text" class="form-control" id="searchFilter" placeholder="Search by name..."
                                value="<%= query.search || '' %>">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Salary Range</label>
                            <select class="form-select" id="salaryFilter">
                                <option value="all">All Salaries</option>
                                <option value="low" <%=query.salaryRange==='low' ? 'selected' : '' %>>Below 20,000
                                </option>
                                <option value="medium" <%=query.salaryRange==='medium' ? 'selected' : '' %>>20,000 -
                                    50,000</option>
                                <option value="high" <%=query.salaryRange==='high' ? 'selected' : '' %>>Above 50,000
                                </option>
                            </select>
                        </div>
                        <div class="col-md-12">
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary" id="applyFilters">
                                    <i class="fas fa-filter me-1"></i>Apply Filters
                                </button>
                                <button class="btn btn-outline-secondary" id="resetFilters">
                                    <i class="fas fa-redo me-1"></i>Reset
                                </button>
                                <button class="btn btn-outline-success" id="exportBtn">
                                    <i class="fas fa-download me-1"></i>Export
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Employees Table -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Employees List</h5>
                        <span class="badge bg-light text-dark">
                            Showing <span id="showingCount">
                                <%= employees.length %>
                            </span> of <span id="totalCount">
                                <%= totalStats.totalEmployees %>
                            </span> employees
                        </span>
                    </div>
                    <div class="card-body">
                        <% if (employees.length> 0) { %>
                            <div class="table-responsive">
                                <table class="table table-hover table-sm">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Name</th>
                                            <th>Contact</th>
                                            <th>Role</th>
                                            <th class="text-end">Salary</th>
                                            <th>Status</th>
                                            <th>Salary Status</th>
                                            <th>Loans</th>
                                            <th width="180px">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% employees.forEach(emp=> {
                                            const salaryStatusClass = emp.salary_status === 'paid' ? 'salary-paid' :
                                            emp.salary_status === 'pending' ? 'salary-pending' : 'text-muted';
                                            %>
                                            <tr class="employee-<%= emp.role %>">
                                                <td>
                                                    <strong>
                                                        <%= emp.name %>
                                                    </strong>
                                                    <br><small class="text-muted">
                                                        <%= emp.email %>
                                                    </small>
                                                </td>
                                                <td>
                                                    <% if (emp.phone) { %>
                                                        <small>
                                                            <%= emp.phone %>
                                                        </small><br>
                                                        <% } %>
                                                            <small class="text-muted">
                                                                <%= emp.cnic || 'No CNIC' %>
                                                            </small>
                                                </td>
                                                <td>
                                                    <span class="badge badge-<%= emp.role %> text-capitalize">
                                                        <%= emp.role %>
                                                    </span>
                                                </td>
                                                <td class="text-end fw-bold">
                                                    <% if (emp.salary) { %>
                                                        <%= shop.currency %>
                                                            <%= emp.salary.toLocaleString() %>
                                                                <% } else { %>
                                                                    <span class="text-muted">Not set</span>
                                                                    <% } %>
                                                </td>
                                                <td>
                                                    <span
                                                        class="badge <%= emp.status === 'active' ? 'badge-active' : 'badge-inactive' %>">
                                                        <%= emp.status %>
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="<%= salaryStatusClass %> text-capitalize">
                                                        <%= emp.salary_status %>
                                                    </span>
                                                </td>
                                                <td>
                                                    <% if (emp.active_loans> 0) { %>
                                                        <span class="loan-active">
                                                            <%= emp.active_loans %> active
                                                        </span>
                                                        <% } else { %>
                                                            <span class="text-muted">None</span>
                                                            <% } %>
                                                </td>
                                                <td class="action-buttons">
                                                    <button class="btn btn-sm btn-outline-primary view-employee"
                                                        data-emp-id="<%= emp.id %>" title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-success manage-salary"
                                                        data-emp-id="<%= emp.id %>" title="Manage Salary">
                                                        <i class="fas fa-money-bill"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning manage-loan"
                                                        data-emp-id="<%= emp.id %>" title="Manage Loan">
                                                        <i class="fas fa-hand-holding-usd"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger delete-employee"
                                                        data-emp-id="<%= emp.id %>" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                            <% }); %>
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            <% if (totalPages> 1) { %>
                                <nav aria-label="Page navigation" class="mt-4">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                            <a class="page-link"
                                                href="/employees?page=<%= currentPage - 1 %><%= buildQueryString(query) %>">Previous</a>
                                        </li>

                                        <% for (let i=1; i <=totalPages; i++) { %>
                                            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                                <a class="page-link"
                                                    href="/employees?page=<%= i %><%= buildQueryString(query) %>">
                                                    <%= i %>
                                                </a>
                                            </li>
                                            <% } %>

                                                <li
                                                    class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                                    <a class="page-link"
                                                        href="/employees?page=<%= currentPage + 1 %><%= buildQueryString(query) %>">Next</a>
                                                </li>
                                    </ul>
                                </nav>
                                <% } %>
                                    <% } else { %>
                                        <div class="text-center py-5">
                                            <i class="fas fa-users fa-4x text-muted mb-3"></i>
                                            <h4 class="text-muted">No Employees Found</h4>
                                            <p class="text-muted">No employees match your current filters.</p>
                                            <button class="btn btn-primary" data-bs-toggle="modal"
                                                data-bs-target="#addEmployeeModal">
                                                <i class="fas fa-plus me-1"></i>Add Employee
                                            </button>
                                        </div>
                                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Employee Modal -->
    <div class="modal fade" id="addEmployeeModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Employee</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addEmployeeForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Full Name *</label>
                                <input type="text" class="form-control" name="name" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email *</label>
                                <input type="email" class="form-control" name="email" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone</label>
                                <input type="text" class="form-control" name="phone">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">CNIC</label>
                                <input type="text" class="form-control" name="cnic">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Role *</label>
                                <select class="form-select" name="role" required>
                                    <option value="">Select Role</option>
                                    <option value="owner">Owner</option>
                                    <option value="manager">Manager</option>
                                    <option value="cashier">Cashier</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Salary (<%= shop.currency %>)</label>
                                <input type="number" class="form-control" name="salary" step="0.01">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Password *</label>
                                <input type="password" class="form-control" name="password" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Confirm Password *</label>
                                <input type="password" class="form-control" name="confirmPassword" required>
                            </div>
                            <div class="col-12 mb-3">
                                <label class="form-label">Notes</label>
                                <textarea class="form-control" name="notes" rows="3"></textarea>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveEmployeeBtn">Save Employee</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Employee Details Modal -->
    <div class="modal fade" id="employeeDetailsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Employee Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="employeeDetailsContent">
                    <!-- Employee details will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Salary Management Modal -->
    <div class="modal fade" id="salaryModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Manage Salary</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="salaryForm">
                        <input type="hidden" id="salaryUserId" name="user_id">
                        <div class="mb-3">
                            <label class="form-label">Month</label>
                            <input type="month" class="form-control" id="salaryMonth" name="month" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Amount (<%= shop.currency %>)</label>
                            <input type="number" class="form-control" id="salaryAmount" name="amount" step="0.01"
                                required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="salaryStatus" name="status" required>
                                <option value="pending">Pending</option>
                                <option value="paid">Paid</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Paid On</label>
                            <input type="date" class="form-control" id="salaryPaidOn" name="paid_on">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" id="salaryNotes" name="notes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveSalaryBtn">Save Salary</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loan Management Modal -->
    <div class="modal fade" id="loanModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Manage Loan</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="loanForm">
                        <input type="hidden" id="loanUserId" name="user_id">
                        <div class="mb-3">
                            <label class="form-label">Amount (<%= shop.currency %>)</label>
                            <input type="number" class="form-control" id="loanAmount" name="amount" step="0.01"
                                required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Taken On</label>
                            <input type="date" class="form-control" id="loanTakenOn" name="taken_on" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Reason</label>
                            <input type="text" class="form-control" id="loanReason" name="reason" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="loanStatus" name="status" required>
                                <option value="active">Active</option>
                                <option value="paid">Paid</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Installment (<%= shop.currency %>)</label>
                            <input type="number" class="form-control" id="loanInstallment" name="installment"
                                step="0.01">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Due Amount (<%= shop.currency %>)</label>
                            <input type="number" class="form-control" id="loanDueAmount" name="due_amount" step="0.01">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" id="loanNotes" name="notes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveLoanBtn">Save Loan</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let currentShopId = '<%= shop.id %>';
        let employees = JSON.parse('<%- JSON.stringify(employees) %>');

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function () {
            console.log('Initializing Employee Management System...');
            initializeFilters();
            initializeEventListeners();
        });

        function initializeFilters() {
            console.log('Initializing filters...');
            
            // Apply filters
            const applyFiltersBtn = document.getElementById('applyFilters');
            if (applyFiltersBtn) {
                applyFiltersBtn.addEventListener('click', applyFilters);
            }

            // Reset filters
            const resetFiltersBtn = document.getElementById('resetFilters');
            if (resetFiltersBtn) {
                resetFiltersBtn.addEventListener('click', resetFilters);
            }

            // Export functionality
            const exportBtn = document.getElementById('exportBtn');
            if (exportBtn) {
                exportBtn.addEventListener('click', exportEmployees);
            }
        }

        function initializeEventListeners() {
            console.log('Initializing event listeners...');
            
            // Save employee
            const saveEmployeeBtn = document.getElementById('saveEmployeeBtn');
            if (saveEmployeeBtn) {
                saveEmployeeBtn.addEventListener('click', saveEmployee);
            }

            // Save salary
            const saveSalaryBtn = document.getElementById('saveSalaryBtn');
            if (saveSalaryBtn) {
                saveSalaryBtn.addEventListener('click', saveSalary);
            }

            // Save loan
            const saveLoanBtn = document.getElementById('saveLoanBtn');
            if (saveLoanBtn) {
                saveLoanBtn.addEventListener('click', saveLoan);
            }

            // Use event delegation for dynamic buttons
            document.addEventListener('click', function (e) {
                // View employee details
                if (e.target.closest('.view-employee')) {
                    const empId = e.target.closest('.view-employee').getAttribute('data-emp-id');
                    viewEmployeeDetails(empId);
                }

                // Manage salary
                if (e.target.closest('.manage-salary')) {
                    const empId = e.target.closest('.manage-salary').getAttribute('data-emp-id');
                    manageSalary(empId);
                }

                // Manage loan
                if (e.target.closest('.manage-loan')) {
                    const empId = e.target.closest('.manage-loan').getAttribute('data-emp-id');
                    manageLoan(empId);
                }

                // Delete employee
                if (e.target.closest('.delete-employee')) {
                    const empId = e.target.closest('.delete-employee').getAttribute('data-emp-id');
                    deleteEmployee(empId);
                }
            });
        }

        function applyFilters() {
            console.log('Applying filters...');
            const roleFilter = document.getElementById('roleFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const searchFilter = document.getElementById('searchFilter').value;
            const salaryFilter = document.getElementById('salaryFilter').value;

            // Build query string
            const params = new URLSearchParams();
            params.append('page', '1');

            if (roleFilter && roleFilter !== 'all') params.append('role', roleFilter);
            if (statusFilter && statusFilter !== 'all') params.append('status', statusFilter);
            if (searchFilter) params.append('search', searchFilter);
            if (salaryFilter && salaryFilter !== 'all') params.append('salaryRange', salaryFilter);

            // Reload page with filters
            window.location.href = `/EmpMgmt?${params.toString()}`;
        }

        function resetFilters() {
            console.log('Resetting filters...');
            // Reset all filter values
            document.getElementById('roleFilter').value = 'all';
            document.getElementById('statusFilter').value = 'all';
            document.getElementById('searchFilter').value = '';
            document.getElementById('salaryFilter').value = 'all';

            // Reload without filters
            window.location.href = '/EmpMgmt?page=1';
        }

        async function saveEmployee() {
            console.log('Saving employee...');
            const form = document.getElementById('addEmployeeForm');
            const formData = new FormData(form);

            // Basic validation
            if (formData.get('password') !== formData.get('confirmPassword')) {
                alert('Passwords do not match!');
                return;
            }

            try {
                const employeeData = {
                    name: formData.get('name'),
                    email: formData.get('email'),
                    phone: formData.get('phone'),
                    cnic: formData.get('cnic'),
                    role: formData.get('role'),
                    salary: formData.get('salary') ? parseFloat(formData.get('salary')) : null,
                    password: formData.get('password'),
                    notes: formData.get('notes')
                };

                console.log('Sending employee data:', employeeData);

                const response = await fetch('/EmpMgmt/api/EmpMgmt', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(employeeData)
                });

                const data = await response.json();
                console.log('Response:', data);

                if (data.success) {
                    // Close modal and reset form
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addEmployeeModal'));
                    modal.hide();
                    form.reset();

                    // Reload page
                    location.reload();

                    alert('Employee added successfully!');
                } else {
                    alert('Error: ' + (data.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error saving employee:', error);
                alert('Error saving employee. Please try again.');
            }
        }

        async function viewEmployeeDetails(empId) {
            console.log('Viewing employee details for:', empId);
            try {
                const response = await fetch(`/EmpMgmt/api/EmpMgmt/${empId}`);
                const data = await response.json();

                if (data.success) {
                    displayEmployeeDetails(data.employee, data.salaries, data.loans);
                } else {
                    alert('Error loading employee details: ' + (data.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error fetching employee details:', error);
                alert('Error loading employee details');
            }
        }

        function displayEmployeeDetails(emp, empSalaries, empLoans) {
            let html = `
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h6>Employee Information</h6>
                        <p><strong>Name:</strong> ${emp.name}</p>
                        <p><strong>Email:</strong> ${emp.email}</p>
                        <p><strong>Phone:</strong> ${emp.phone || 'Not provided'}</p>
                        <p><strong>CNIC:</strong> ${emp.cnic || 'Not provided'}</p>
                    </div>
                    <div class="col-md-6">
                        <h6>Employment Details</h6>
                        <p><strong>Role:</strong> <span class="badge badge-${emp.role} text-capitalize">${emp.role}</span></p>
                        <p><strong>Status:</strong> <span class="badge ${emp.status === 'active' ? 'badge-active' : 'badge-inactive'}">${emp.status}</span></p>
                        <p><strong>Salary:</strong> ${emp.salary ? `${emp.shop_currency || 'PKR'} ${emp.salary.toLocaleString()}` : 'Not set'}</p>
                        <p><strong>Joined:</strong> ${new Date(emp.created_at).toLocaleDateString()}</p>
                    </div>
                </div>
            `;

            if (emp.notes) {
                html += `
                    <div class="mb-4">
                        <h6>Notes</h6>
                        <p>${emp.notes}</p>
                    </div>
                `;
            }

            // Salary history
            html += `
                <h6>Salary History</h6>
                <div class="table-responsive mb-4">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Month</th>
                                <th class="text-end">Amount</th>
                                <th>Status</th>
                                <th>Paid On</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            if (empSalaries && empSalaries.length > 0) {
                empSalaries.forEach(salary => {
                    html += `
                        <tr>
                            <td>${salary.month}</td>
                            <td class="text-end">${emp.shop_currency || 'PKR'} ${parseFloat(salary.amount).toLocaleString()}</td>
                            <td><span class="${salary.status === 'paid' ? 'salary-paid' : 'salary-pending'}">${salary.status}</span></td>
                            <td>${salary.paid_on ? new Date(salary.paid_on).toLocaleDateString() : '-'}</td>
                            <td>${salary.notes || '-'}</td>
                        </tr>
                    `;
                });
            } else {
                html += `
                    <tr>
                        <td colspan="5" class="text-center text-muted">No salary records found</td>
                    </tr>
                `;
            }

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            // Loan history
            html += `
                <h6>Loan History</h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Amount</th>
                                <th>Taken On</th>
                                <th>Reason</th>
                                <th>Status</th>
                                <th class="text-end">Installment</th>
                                <th class="text-end">Due Amount</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            if (empLoans && empLoans.length > 0) {
                empLoans.forEach(loan => {
                    html += `
                        <tr>
                            <td>${emp.shop_currency || 'PKR'} ${parseFloat(loan.amount).toLocaleString()}</td>
                            <td>${new Date(loan.taken_on).toLocaleDateString()}</td>
                            <td>${loan.reason}</td>
                            <td><span class="${loan.status === 'paid' ? 'loan-paid' : 'loan-active'}">${loan.status}</span></td>
                            <td class="text-end">${loan.installment ? `${emp.shop_currency || 'PKR'} ${parseFloat(loan.installment).toLocaleString()}` : '-'}</td>
                            <td class="text-end">${loan.due_amount ? `${emp.shop_currency || 'PKR'} ${parseFloat(loan.due_amount).toLocaleString()}` : '-'}</td>
                            <td>${loan.notes || '-'}</td>
                        </tr>
                    `;
                });
            } else {
                html += `
                    <tr>
                        <td colspan="7" class="text-center text-muted">No loan records found</td>
                    </tr>
                `;
            }

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            document.getElementById('employeeDetailsContent').innerHTML = html;
            new bootstrap.Modal(document.getElementById('employeeDetailsModal')).show();
        }

        function manageSalary(empId) {
            console.log('Managing salary for employee:', empId);
            
            // Find employee from the table
            const row = document.querySelector(`[data-emp-id="${empId}"]`).closest('tr');
            const empName = row.querySelector('strong').textContent;
            const salaryText = row.querySelector('.fw-bold').textContent;
            const salaryMatch = salaryText.match(/(\d+\.?\d*)/);
            
            document.getElementById('salaryUserId').value = empId;
            document.getElementById('salaryMonth').value = getCurrentMonth();
            document.getElementById('salaryAmount').value = salaryMatch ? salaryMatch[0] : '';
            document.getElementById('salaryStatus').value = 'pending';
            document.getElementById('salaryPaidOn').value = '';
            document.getElementById('salaryNotes').value = '';

            new bootstrap.Modal(document.getElementById('salaryModal')).show();
        }

        async function saveSalary() {
            console.log('Saving salary...');
            const form = document.getElementById('salaryForm');
            const formData = new FormData(form);

            const salaryData = {
                user_id: parseInt(formData.get('user_id')),
                month: formData.get('month'),
                amount: parseFloat(formData.get('amount')),
                status: formData.get('status'),
                paid_on: formData.get('paid_on') || null,
                notes: formData.get('notes')
            };

            try {
                console.log('Sending salary data:', salaryData);

                const response = await fetch(`/EmpMgmt/api/EmpMgmt/${salaryData.user_id}/salary`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(salaryData)
                });

                const data = await response.json();
                console.log('Response:', data);

                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('salaryModal'));
                    modal.hide();

                    // Reload page
                    location.reload();

                    alert('Salary saved successfully!');
                } else {
                    alert('Error: ' + (data.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error saving salary:', error);
                alert('Error saving salary. Please try again.');
            }
        }

        function manageLoan(empId) {
            console.log('Managing loan for employee:', empId);
            
            document.getElementById('loanUserId').value = empId;

            // Clear form
            document.getElementById('loanForm').reset();
            document.getElementById('loanTakenOn').valueAsDate = new Date();
            document.getElementById('loanStatus').value = 'active';

            new bootstrap.Modal(document.getElementById('loanModal')).show();
        }

        async function saveLoan() {
            console.log('Saving loan...');
            const form = document.getElementById('loanForm');
            const formData = new FormData(form);

            const loanData = {
                user_id: parseInt(formData.get('user_id')),
                amount: parseFloat(formData.get('amount')),
                taken_on: formData.get('taken_on'),
                reason: formData.get('reason'),
                status: formData.get('status'),
                installment: formData.get('installment') ? parseFloat(formData.get('installment')) : null,
                due_amount: formData.get('due_amount') ? parseFloat(formData.get('due_amount')) : null,
                notes: formData.get('notes')
            };

            try {
                console.log('Sending loan data:', loanData);

                const response = await fetch(`/EmpMgmt/api/EmpMgmt/${loanData.user_id}/loan`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(loanData)
                });

                const data = await response.json();
                console.log('Response:', data);

                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('loanModal'));
                    modal.hide();

                    // Reload page
                    location.reload();

                    alert('Loan saved successfully!');
                } else {
                    alert('Error: ' + (data.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error saving loan:', error);
                alert('Error saving loan. Please try again.');
            }
        }

        async function deleteEmployee(empId) {
            console.log('Deleting employee:', empId);
            
            if (confirm('Are you sure you want to delete this employee? This action cannot be undone.')) {
                try {
                    const response = await fetch(`/EmpMgmt/api/EmpMgmt/${empId}`, {
                        method: 'DELETE'
                    });

                    const data = await response.json();
                    console.log('Response:', data);

                    if (data.success) {
                        // Reload page
                        location.reload();
                        alert('Employee deleted successfully!');
                    } else {
                        alert('Error: ' + (data.message || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Error deleting employee:', error);
                    alert('Error deleting employee. Please try again.');
                }
            }
        }

        function getCurrentMonth() {
            const now = new Date();
            return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
        }

        async function exportEmployees() {
            console.log('Exporting employees...');
            try {
                // Get current filters
                const roleFilter = document.getElementById('roleFilter').value;
                const statusFilter = document.getElementById('statusFilter').value;
                const searchFilter = document.getElementById('searchFilter').value;
                const salaryFilter = document.getElementById('salaryFilter').value;

                // Build export URL with filters
                const params = new URLSearchParams();
                if (roleFilter && roleFilter !== 'all') params.append('role', roleFilter);
                if (statusFilter && statusFilter !== 'all') params.append('status', statusFilter);
                if (searchFilter) params.append('search', searchFilter);
                if (salaryFilter && salaryFilter !== 'all') params.append('salaryRange', salaryFilter);

                const response = await fetch(`/EmpMgmt/api/EmpMgmt/export?${params.toString()}`);
                const data = await response.json();

                if (data.success) {
                    // Create and download CSV file
                    const csv = convertToCSV(data.data);
                    downloadCSV(csv, 'employees.csv');
                } else {
                    alert('Error exporting data: ' + (data.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error exporting employees:', error);
                alert('Error exporting employees data');
            }
        }

        function convertToCSV(data) {
            if (data.length === 0) return '';

            const headers = Object.keys(data[0]);
            const csvRows = [headers.join(',')];

            for (const row of data) {
                const values = headers.map(header => {
                    const escaped = ('' + row[header]).replace(/"/g, '\\"');
                    return `"${escaped}"`;
                });
                csvRows.push(values.join(','));
            }

            return csvRows.join('\n');
        }

        function downloadCSV(csv, filename) {
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', filename);
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }
    </script>
</body>

</html>